[{"id":"\/3.x\/intro.html#1-1-1","title":"1.1.1. Installation","content":"Qiq is installable via Composer as qiq\/qiq:composer require qiq\/qiq ^2.0 "},{"id":"\/3.x\/intro.html#1-1-2","title":"1.1.2. Getting Started","content":"First, a template file, saved at \/path\/to\/templates\/hello.php:Hello, {{h $name }}. That was Qiq! And this is PHP, &lt;?= $this-&gt;h($name) ?&gt;. Next, the presentation code, to generate output using the hello template:use Qiq\\Template; $template = Template::new('\/path\/to\/templates'); $template-&gt;setView('hello'); $template-&gt;setData([ 'name' =&gt; 'World' ]); echo $template(); That's all there is to it."},{"id":"\/3.x\/syntax.html#1-2","title":"1.2. Template Syntax","content":"Qiq templates are native PHP templates, with an optional {{ ... }} syntax for concise escaping and helper use."},{"id":"\/3.x\/syntax.html#1-2-1","title":"1.2.1. Escaping and Output","content":"Qiq will not echo any output itself, unless the opening tag starts with a recognized escaping character: {{ ... }} will not echo at all by itself {{= ... }} will echo raw unescaped output {{h ... }} will echo escaped for HTML content {{a ... }} will echo escaped for HTML attributes {{u ... }} will echo escaped for URLs {{c ... }} will echo escaped for CSS {{j ... }} will echo escaped for JavaScript The {{a ... }} tag offers the additional ability to output an array, using the key as the attribute label and the value as the attribute value; multiple attribute values will be space-separated. The following Qiq code ...&lt;span {{a ['id' =&gt; 'foo', 'class' =&gt; ['bar', 'baz', 'dib']] }}&gt;Text&lt;\/span&gt; ... will render as:&lt;span id=\"foo\" class=\"bar baz dib\"&gt;Text&lt;\/span&gt; You can echo just about any variable, literal, function, method, expression, or constant, including the magic constants __DIR__, __FILE__, and __LINE__.{{h $foo }} {{h \"foo\" }} {{h 1 + 2 }} {{h __FILE__ }} {{h PHP_EOL }} {{h $person-&gt;firstName() }} {{h time() }} If you need to embed double curly braces literally, and not have them interpreted as Qiq tags, put a backslash between the braces. The following Qiq code ...{{ \/* this is qiq code *\/ }} {\\{ this is not qiq code }\\} ... will compile to this PHP code:&lt;?php \/* this is qiq code *\/ ?&gt; {{ this is not qiq code }} "},{"id":"\/3.x\/syntax.html#1-2-2","title":"1.2.2. Control Structures","content":"All control structures are written exactly as in PHP, using the alternative control structure syntax when available, inside {{ ... }} Qiq tags.For example, this Qiq code ...{{ foreach ($foo as $bar =&gt; $baz): }} {{ if ($baz === 0): }} {{= \"First element!\" }} {{ else: }} {{= \"Not the first element.\" }} {{ endif }} {{ endforeach }} ... is the same as this PHP code:&lt;?php foreach ($foo as $bar =&gt; $baz): ?&gt; &lt;?php if ($bar === 0): ?&gt; &lt;?= \"First element!\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php else: ?&gt; &lt;?= \"Not the first element.\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; &lt;?php endforeach ?&gt; "},{"id":"\/3.x\/syntax.html#1-2-3","title":"1.2.3. Helpers","content":"Any code inside Qiq tags, that PHP would recognize as a potential function call, is treated as a Qiq template helper method. Thus, the following Qiq syntax ...{{= label (\"Street Address\", for: 'street') }} {{= textField ( name: 'street', value: $street, ) }} ... is equivalent to this PHP code with Qiq helpers:&lt;?= $this-&gt;label(\"Street Address\", for: 'street') ?&gt; &lt;?= $this-&gt;textField( name: 'street', value: $street, ) ?&gt; You can use helper method names anywhere inside Qiq code with or without the $this-&gt; prefix. In all of the below examples, the anchor() helper result is assigned to a variable:{{ $a_com = anchor ('http:\/\/example.com') }} {{ $a_net = $this-&gt;anchor ('http:\/\/example.net') }} &lt;?php $a_org = $this-&gt;anchor('http:\/\/example.org') ?&gt; "},{"id":"\/3.x\/syntax.html#1-2-4","title":"1.2.4. Undefined Helpers","content":"If a helper method name is not defined, the Helpers class will call it as as PHP function instead. For example, if a time helper method is not defined, the following will call the time PHP function:{{h time () }} However, this may not pass static analysis checks. To improve static analysis results, prefix the call with a backslash to explicitly indicate a PHP function:{{h \\time () }} Alternatively, you may create a custom helper method to override the PHP function."},{"id":"\/3.x\/syntax.html#1-2-5","title":"1.2.5. Other PHP Code","content":"Qiq treats all other code inside {{ ... }} tags as plain old PHP code. For example, this Qiq syntax ...{{ $title = \"Prefix: \" . $title . \" (Suffix)\" }} &lt;title&gt;{{h $title}}&lt;\/title&gt; ... is equivalent to this PHP code with Qiq helpers:&lt;?php $title = \"Prefix: \" . $title . \" (Suffix)\" ?&gt; &lt;title&gt;&lt;?= $this-&gt;h($title) ?&gt;&lt;\/title&gt; "},{"id":"\/3.x\/syntax.html#1-2-6","title":"1.2.6. Whitespace","content":"Qiq goes to some lengths to help control whitespace in output, to keep the compiled template code on the same lines as in the source template, and to help make sure the output is formatted nicely."},{"id":"\/3.x\/syntax.html#1-2-6-1","title":"1.2.6.1. Newlines","content":"Qiq offers intuitive handling of newlines around tags: Non-echoing Qiq tags, just as with plain PHP, will consume any single trailing newline immediately after the closing tag. Echoing Qiq tags, whether raw or escaped, will honor any single trailing newline immediately after the closing tag. For example, this Qiq code ...{{ if ($condition): }} {{= \"foo\" }} {{ endif; }} ... compiles to this PHP code:&lt;?php if ($condition): ?&gt; &lt;?= \"foo\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; Non-echoing Qiq can be made to echo a single leading newline by using a tilde with the opening tag. This Qiq code ...{{~ foreach ($foo as $bar): }} ... {{~ endforeach }} ... compiles to this PHP code:&lt;?= PHP_EOL ?&gt;&lt;?php foreach ($foo as $bar): ?&gt; ... &lt;?= PHP_EOL ?&gt;&lt;?php endforeach ?&gt; This is especially useful with looping output code, where you want to honor newlines at the very beginning and very end of the loop.Echoing Qiq can be made to consume a single trailing newline by using a tilde with the closing tag. This Qiq code ...{{h $foo ~}} ... compiles to this PHP code:&lt;?= $this-&gt;h($foo) ?&gt; A tilde with the closing tag has no effect on non-echoing Qiq code."},{"id":"\/3.x\/syntax.html#1-2-6-2","title":"1.2.6.2. Indenting","content":"Echoing Qiq tags will automatically set the current indent for helpers based on the leading whitespace before the opening Qiq tag.This Qiq code ...&lt;ul&gt; {{= items (['foo', 'bar', 'baz']) }} &lt;\/ul&gt; ... compiles to this PHP code:&lt;ul&gt; &lt;?php $this-&gt;setIndent(\" \") ?&gt;&lt;?= $this-&gt;items(['foo', 'bar', 'baz']) ?&gt; &lt;\/ul&gt; "},{"id":"\/3.x\/data.html#1-3-1","title":"1.3.1. Assigning Variables","content":"To assign a data collection to the Template, use the setData() method and pass either an array or a stdClass object.$template-&gt;setData([ 'items' =&gt; [ [ 'id' =&gt; '1', 'name' =&gt; 'Foo', ], [ 'id' =&gt; '2', 'name' =&gt; 'Bar', ], [ 'id' =&gt; '3', 'name' =&gt; 'Baz', ], ) ]); The setData() method will overwrite all existing data in the Template object.The addData() method, on the other hand, will merge any iterable with the existing Template data.$template-&gt;addData([ 'title' =&gt; 'My Items', ]); "},{"id":"\/3.x\/data.html#1-3-2","title":"1.3.2. Using Assigned Variables","content":"You can then use the assigned data as variables within the template file:&lt;p&gt;{{h $title}}&lt;\/p&gt; &lt;ul&gt; {{ foreach ($items as $id =&gt; $name): }} &lt;li id=\"{{a $id}}\"&gt;{{h $name }}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; "},{"id":"\/3.x\/data.html#1-3-3","title":"1.3.3. Getting Assigned Variables","content":"If you want to get a copy of all assigned data as an array, use getData (). Any changes you make to the copy will be to the copy and not to the data actually assigned to the Template.Alternatively, if you want to get a reference to the array of all assigned data, use &amp;refData(). Any changes you make to the reference will be to the actual assigned data."},{"id":"\/3.x\/data.html#1-3-4","title":"1.3.4. Variable Scope","content":"Data assigned to the Template object with setData() or addData() is shared in every template file by reference. Modifications to an assigned variable in one template file will be shared with all other template files. In the above example, $title and $items are available in every template file. Changes to $title or $items will be shared through other template files.However, variables created inside a template file are local to that template file only. They are not shared with any other template. In the above example, $id and $name (because they are created inside the template file) are local to that template file only, and changes to them will not be seen anywhere else.When designing template files, be careful not to accidentally overwrite assigned variables with local variables. The changes to the assigned values will be shared with all other templates, which may not be what you want.Finally, changes to assigned variables via setData(), addData(), and &amp;refData() from inside a template file will not be honored within that template file, only in the next one rendered. This is because the assigned variables have already been extracted into the current scope; only the next templates to be rendered will see the modified values."},{"id":"\/3.x\/catalog.html#1-4","title":"1.4. Template File Catalog","content":"Qiq will search through any number of directory paths for template files. You can pass an array of paths to Template::new() ...$template = Template::new( paths: [ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ], ); ... or you can tell the Catalog directly:$template-&gt;getCatalog()-&gt;setPaths([ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ]); The Catalog will search for the template file from the first directory path to the last.\/* searches first for: \/path\/to\/custom\/templates\/foo.php and then second for: \/path\/to\/default\/templates\/foo.php *\/ $output = $template('foo'); If you like, you can modify the paths after the Template instantiation to prepend or append a directory path to the Catalog:$template-&gt;getCatalog()-&gt;prependPath('\/higher\/precedence\/templates'); $template-&gt;getCatalog()-&gt;appendPath('\/lower\/precedence\/templates'); "},{"id":"\/3.x\/catalog.html#1-4","title":"1.4. Subdirectories","content":"To render a template file from any location, use the absolute path to the template name (no leading slash is necessary):\/\/ renders the \"foo\/bar\/baz.php\" template $output = $template('foo\/bar\/baz'); Alternatively, while inside a template file, you may refer to other template files by relative path. Use .\/ to indicate a template file in the same directory, or ..\/ to indicate the directory above the current one.Given a template file structure like the following ...foo.php foo\/ bar.php bar\/ baz.php dib.php ... while inside the foo\/bar\/baz.php template file:\/\/ refers to \"foo\/bar\/dib.php\" echo $this-&gt;render('.\/dib'); \/\/ refers to \"foo\/bar.php\" echo $this-&gt;render('..\/bar'); \/\/ refers to \"foo.php\" echo $this-&gt;render('..\/..\/foo'); "},{"id":"\/3.x\/catalog.html#1-4","title":"1.4. File Name Extension","content":"By default, the Catalog will auto-append .php to template file names. If the template files end with a different extension, change it using the setExtension() method:$catalog = $template-&gt;getCatalog(); $catalog-&gt;setExtension('.phtml'); Or, you can set the extension at Template creation time:$template = Template::new( extension: '.qiq.php' ); "},{"id":"\/3.x\/catalog.html#1-4","title":"1.4. Collections","content":"Sometimes it may be useful to identify collections of templates, say for emails or for admin pages. (Other template systems may refer to these as \"groups\", \"folders\", or \"namespaces\".)To associate a directory path with a collection, prefix the path with the collection name and a colon:$template = Template::new( paths: [ 'admin:\/path\/to\/admin\/templates', 'email:\/path\/to\/email\/templates', ] ); To render a template from a collection, prefix the template name with the collection name.$output = $template('email:notify\/subscribed'); You can set, append, and prepend collection paths, the same as you would with the \"main\" or \"default\" collection of unprefixed template paths."},{"id":"\/3.x\/partials.html#1-5","title":"1.5. Partials","content":"Sometimes you will want to split a single template file into multiple files. You can render these \"partial\" template pieces using the render() method in your main template code.When rendering, you can pass an array of variables to be extracted into the local scope of the partial template. (All shared variables assigned to the Template variable will also be available.)For example, a list partial template might look like this:&lt;ul&gt; {{ foreach ($items as $item): }} &lt;li&gt;{{h $item}}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; Then in a main browse template, you can render the partial list:&lt;p&gt;My List&lt;\/p&gt; {{= render ('.\/list', [ 'items' =&gt; ['foo', 'bar', 'baz'] ]) }} The rendered HTML will look something like this:&lt;p&gt;My List&lt;\/p&gt; &lt;ul&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/3.x\/layouts.html#1-6","title":"1.6. Layouts","content":"To wrap a main \"inner\" view template with an \"outer\" layout template, call setLayout() to pick a second \"outer\" template for the second step. (If no layout is set, the second step will not be executed.)Let's say you already have a view template called browse. You might then have a layout template called default to wrap the view. The default.php layout template could look like this:&lt;html&gt; &lt;head&gt; &lt;title&gt;My Site&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; {{= getContent() }} &lt;\/body&gt; &lt;\/html&gt; You can then set the view and layout templates on the Template object and invoke it:$template-&gt;setView('browse'); $template-&gt;setLayout('default'); $output = $template(); The output from the inner view template is automatically retained and becomes available via the getContent() method on the Template object. The layout template then calls getContent() to place the inner view results in the outer layout template. Note: You can also call setLayout() from inside the view template, allowing you to pick a layout as part of the view logic. The view template and the layout template both execute inside the same Template object. This means: All variables assigned to the view are shared with the layout. All helpers are shared between the view and the layout. This sharing situation allows the view to modify data and helpers before the layout is executed."},{"id":"\/3.x\/blocks.html#1-7","title":"1.7. Blocks","content":"Blocks are similar to partials, except that they are captured inline for later use.In general, blocks are used by view templates to capture output for layout templates.Alternatively, blocks may be used by child templates to capture output for parent templates (cf. the inheritance documentation).For example, a layout template file might define a block for local navigation, adding some default content for that block:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; {{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; {{= getBlock () ~}} &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; The setBlock() method opens the specified block; getBlock() closes the block and echoes the captured output from between the two method calls.Then, a view file might redefine that block:{{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent--&gt; {{ parentBlock() }} &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; {{ endBlock () }} Note the use of parentBlock() above. This method is a placeholder for the parent block content, allowing you to prepend and append that content if you like. (If you do not call parentBlock(), the setBlock() call will completely override the parent block content.)Finally, rendering the combined view and layout ...$template = Template::new(...); $template-&gt;setLayout('layout'); $template-&gt;setView('view'); $output = $template(); ... will generate something like the following output:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent --&gt; &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; "},{"id":"\/3.x\/inheritance.html#1-8","title":"1.8. Inheritance","content":"Whereas you can wrap an inner \"view\" template with an outer \"layout\" template, you can also \"extend\" one template with another template. The differences are subtle but important.Here is an example of template inheritance. First, a \"parent\" template, composed of a series of blocks:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; {{ setBlock ('head_title') }}{{= getBlock () ~}} {{ setBlock ('head_meta') }}{{= getBlock () ~}} {{ setBlock ('head_links') }}{{= getBlock () ~}} {{ setBlock ('head_styles') }} &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{= getBlock () ~}} {{ setBlock ('head_scripts') }}{{= getBlock () ~}} &lt;\/head&gt; &lt;body&gt; {{ setBlock ('body_header') }}{{= getBlock () ~}} {{ setBlock ('body_content') }}{{= getBlock () ~}} {{ setBlock ('body_footer') }}{{= getBlock () ~}} &lt;\/body&gt; &lt;\/html&gt; The above code defines a series of blocks via setBlock(), then displays the final block contents via getBlock(). (Note the use of the closing tag ~}} to consume the newline after the tag, which condenses blank lines in the output.)Next, a \"child\" template that extends the \"parent\" template. Note how it extends() the \"parent\" template, and overrides or modifies content from the parent blocks:{{ extends ('parent') }} {{ setBlock ('head_title') }} &lt;title&gt; My Extended Page &lt;\/title&gt; {{ endBlock () }} {{ setBlock ('head_meta') }} &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; {{ endBlock () }} {{ setBlock ('head_styles') }} {{ parentBlock () }} &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{ endBlock () }} {{ setBlock ('body_content') }} &lt;p&gt;The main content for my extended page.&lt;\/p&gt; {{ endBlock () }} Finally, when you render the \"child\" template ...$output = $template('child'); ... the output will look something like this:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;title&gt; My Extended Page &lt;\/title&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;\/head&gt; &lt;body&gt; &lt;p&gt;The main content for my extended page.&lt;\/p&gt; &lt;\/body&gt; &lt;\/html&gt; A similar approach is possible with views and layouts. However, only one layer of extension is possible that way (i.e., from the view to the layout). With extends(), any number of layers is possible.Both views and layouts may use extends(). That is, an inner view may extend one series of templates, and an outer layout may extend a different series of templates.Blocks are shared between both views and layouts. Layout blocks can be referred to by views, and vice versa.Finally, getContent() may not work as expected when extending templates. Any content not in a block will be overwritten with each successive call to extends(), so that only content from the last rendered template will be captured. As such, it is probably best to capture the \"main\" content of a view inside a block of its own, as in the above example, rather than using getContent()."},{"id":"\/3.x\/helpers\/overview.html#1-9-1","title":"1.9.1. Overview","content":"Helpers are class methods that generate output for you. You can address them as methods on $this in PHP template code, or by just the helper name when using Qiq syntax.PHP syntax:&lt;?= $this-&gt;anchor('http:\/\/qiqphp.com', 'Qiq for PHP') ?&gt; Qiq syntax:{{= anchor ('http:\/\/qiqphp.com', 'Qiq for PHP') }} Both generate this HTML:&lt;a href=\"http:\/\/qiqphp.com\"&gt;Qiq for PHP&lt;\/a&gt; Qiq comes with a comprehensive set of helpers for general use, and for building forms. You can also create your own custom helpers.Further, you can call any public or protected Template method from the template file. (This is because the template file is executed \"inside\" the Template object.) Among other things, you can set the layout, or render other templates, from inside any template:{{ setLayout ('seasonal-layout') }} {{= render ('some\/other\/template') }} "},{"id":"\/3.x\/helpers\/general.html#1-9-2","title":"1.9.2. General Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code.Finally, many of these helpers accept a trailing variadic list of named parameters as HTML tag attributes. This means you can add just about any attribute as if it was a parameter on the helper method. Underscores in the parameter name will be converted to dashes; e.g., foo_bar: 'baz' will become foo-bar=\"baz\" in the returned helper output. For attributes that cannot double as named parameters, use the attr array parameter; for example:{{= anchor ( 'http:\/\/qiqphp.com', 'Qiq Project', attr: [ \/\/ (array) optional key-value attributes 'xml:lang' =&gt; 'en', ], id: 'qiq-link', \/\/ (...mixed) optional named parameter attributes ) }} The example code will produce this HTML:&lt;a href=\"http:\/\/qiqphp.com\" xml:lang=\"en\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-1","title":"1.9.2.1. anchor","content":"Helper for &lt;a&gt; tags.{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href 'Qiq Project', \/\/ (string) text attr: [], \/\/ (array) optional key-value attributes id: 'qiq-link', \/\/ (...mixed) optional named parameter attributes ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-2","title":"1.9.2.2. base","content":"Helper for &lt;base&gt; tags.{{= base ( '\/base' \/\/ (string) href ) }} &lt;base href=\"\/base\" \/&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-3","title":"1.9.2.3. dl","content":"Helper for &lt;dl&gt; tags with &lt;dt&gt;\/&lt;dd&gt; items.{{= dl ( [ \/\/ (array) dt keys and dd values 'foo' =&gt; 'Foo Def', 'bar' =&gt; [ 'Bar Def A', 'Bar Def B', 'Bar Def C', ], 'baz' =&gt; 'Baz Def', ], attr: [], \/\/ (array) optional key-value attributes id: 'test' \/\/ (...mixed) optional named parameter attributes ) }} &lt;dl id=\"test\"&gt; &lt;dt&gt;foo&lt;\/dt&gt; &lt;dd&gt;Foo Def&lt;\/dd&gt; &lt;dt&gt;bar&lt;\/dt&gt; &lt;dd&gt;Bar Def A&lt;\/dd&gt; &lt;dd&gt;Bar Def B&lt;\/dd&gt; &lt;dd&gt;Bar Def C&lt;\/dd&gt; &lt;dt&gt;baz&lt;\/dt&gt; &lt;dd&gt;Baz Def&lt;\/dd&gt; &lt;\/dl&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-4","title":"1.9.2.4. image","content":"Helper for &lt;img&gt; tags.{{= image ( '\/images\/hello.jpg', \/\/ (string) image href src attr: [], \/\/ (array) optional key-value attributes id: 'image-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if alt is not specified, uses the basename of the image href --&gt; &lt;img src=\"\/images\/hello.jpg\" alt=\"hello\" id=\"image-id\" \/&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-5","title":"1.9.2.5. items","content":"Helper for a series of &lt;li&gt; tags.{{= items ([ \/\/ (array) list items 'foo', 'bar', 'baz' ]) }} &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-6","title":"1.9.2.6. link","content":"Helper for a &lt;link&gt; tag.{{= link ( rel: 'prev', href: '\/path\/to\/prev', attr: [], \/\/ (array) optional key-value attributes id: 'link-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;link rel=\"prev\" href=\"\/path\/to\/prev\" id=\"link-id\" \/&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-7","title":"1.9.2.7. linkStylesheet","content":"Helper for a &lt;link&gt; stylesheet tag.{{= linkStylesheet ( '\/css\/print.css', \/\/ (string) the stylesheet href attr: [], \/\/ (array) optional key-value attributes media: 'print' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if type is not specified, uses \"text\/css\" --&gt; &lt;!-- if media is not specified, uses \"screen\" --&gt; &lt;link rel=\"stylesheet\" href=\"\/css\/print.css\" type=\"text\/css\" media=\"print\" \/&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-8","title":"1.9.2.8. meta","content":"Helper for a &lt;meta&gt; tag.For general use:{{= meta ( attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} For charset:{{= meta ( charset: 'utf-8' ) }} &lt;meta charset=\"utf-8\"&gt; For http-equiv:{{= meta ( http_equiv: 'Location', content: '\/redirect\/to\/here' ) }} &lt;meta http-equiv=\"Location\" content=\"\/redirect\/to\/here\"&gt; For name:{{= meta ( name: 'author', content: 'Qiq for PHP' ) }} &lt;meta name=\"author\" content=\"Qiq for PHP\"&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-9","title":"1.9.2.9. ol","content":"Helper for &lt;ol&gt; tags with &lt;li&gt; items.{{= ol ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], attr: [], \/\/ (array) optional key-value attributes id: 'foo-list' \/\/ (...mixed) optional named parameter attributes ) }} &lt;ol id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ol&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-10","title":"1.9.2.10. script","content":"Helper for a &lt;script&gt; tag.{{= script ( '\/js\/functions.js', \/\/ (string) src attribute attr: [], \/\/ (array) optional key-value attributes async: true \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if type is not specified, uses \"text\/javascript\" --&gt; &lt;script src=\"\/js\/functions.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt; "},{"id":"\/3.x\/helpers\/general.html#1-9-2-11","title":"1.9.2.11. ul","content":"Helper for &lt;ul&gt; tags with &lt;li&gt; items.{{= ul ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], attr: [], \/\/ (array) optional key-value attributes id: 'foo-list' \/\/ (...mixed) optional named parameter attributes ) }} &lt;ul id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3","title":"1.9.3. Form Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code.Finally, many of these helpers accept a trailing variadic list of named parameters as HTML tag attributes. This means you can add just about any attribute as if it was a parameter on the helper method. Underscores in the parameter name will be converted to dashes; e.g., foo_bar: 'baz' will become foo-bar=\"baz\" in the returned helper output. For attributes that cannot double as named parameters, use the attr array parameter."},{"id":"\/3.x\/helpers\/forms.html#1-9-3-1","title":"1.9.3.1. Form Tag","content":"Open a form like so:{{= form ( action: '\/hello', attr: [], \/\/ (array) optional key-value attributes id: 'form-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- defaults to method=\"post\" action=\"\" enctype=\"multipart\/form-data\" --&gt; &lt;form method=\"post\" action=\"\/hello\" enctype=\"multipart\/form-data\" id=\"form-id\"&gt; You can close a form just using &lt;\/form&gt;."},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-1","title":"1.9.3.2.1. checkboxField","content":"{{= checkboxField ( name: 'flag', value: 'foo', checked: true, attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"checkbox\" name=\"flag\" value=\"foo\" checked \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-2","title":"1.9.3.2.2. checkboxFields","content":"The checkboxFields helper can be used for one or more checkboxes at a time, and has greater functionality than the checkboxField helper: The options array specifies one or more checkboxes as part of the field, with each value when checked, and the corresponding label. If the options have more than one element, then field name will be appended automatically with [] to make it an array. The value attribute will be matched against the options and the correct checkboxes will be checked for you. The default parameter, when non-null, will produce a hidden input field for the value when no checkboxes are checked. {{= checkboxFields ( name: 'flags', value: 'bar', default: '', options: [ 'foo' =&gt; 'Foo Flag', 'bar' =&gt; 'Bar Flag', 'baz' =&gt; 'Baz Flag', ], attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"hidden\" name=\"flags\" value=\"\" \/&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"foo\" \/&gt; Foo Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"bar\" checked \/&gt; Bar Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"baz\" \/&gt; Baz Flag&lt;\/label&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-3","title":"1.9.3.2.3. colorField","content":"{{= colorField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"color\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-4","title":"1.9.3.2.4. dateField","content":"{{= dateField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"date\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-5","title":"1.9.3.2.5. datetimeField","content":"{{= datetimeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"datetime\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-6","title":"1.9.3.2.6. datetimeLocalField","content":"{{= datetimeLocalField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"datetime-local\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-7","title":"1.9.3.2.7. emailField","content":"{{= emailField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"email\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-8","title":"1.9.3.2.8. fileField","content":"{{= fileField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"file\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-9","title":"1.9.3.2.9. hiddenField","content":"{{= hiddenField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"hidden\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-10","title":"1.9.3.2.10. inputField","content":"A generic input field; specify the type needed.{{= inputField ( type: 'text', name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-11","title":"1.9.3.2.11. monthField","content":"{{= monthField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"month\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-12","title":"1.9.3.2.12. numberField","content":"{{= numberField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"number\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-13","title":"1.9.3.2.13. passwordField","content":"{{= passwordField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"password\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-14","title":"1.9.3.2.14. radioField","content":"{{= radioField ( name: 'foo', value: 'baz', checked: true, attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-15","title":"1.9.3.2.15. radioFields","content":"The radioFields helper has greater functionality than the radioField helper: The options parameter specfies one or more radio buttons as part of the field, with their value when checked, and their corresponding label. The value parameter will be matched against the options and the correct radio button will be checked for you. {{= radioFields ( name: 'foo', value: 'baz', options: [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label, 'dib' =&gt; 'Dib Label', ), attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"bar\" \/&gt; Bar Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; Baz Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"dib\" \/&gt; Dib Label&lt;\/label&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-16","title":"1.9.3.2.16. rangeField","content":"{{= rangeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"range\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-17","title":"1.9.3.2.17. searchField","content":"{{= searchField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"search\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-18","title":"1.9.3.2.18. select","content":"Use the options parameter to describe the &lt;option&gt; tags.The placeholder parameter is honored as a placeholder label when no option is selected. The default parameter, when non-null, specifies the value of that placeholder.Use multiple: true to set up a multiple select; this will automatically add [] to the name if it is not already there.{{= select ( name: 'foo', value: 'dib', placeholder: 'Please pick one', default: '', options: [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;select name=\"foo\"&gt; &lt;option value=\"\" disabled&gt;Please pick one&lt;\/option&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/select&gt; The helper also supports option groups. If an options array value is itself an array, the key for that element will be used as an &lt;optgroup&gt; label and the array of values will be options under that group.{{= select ( name: 'foo', value: 'bar', options: =&gt; [ 'Group A' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', ], 'Group B' =&gt; [ 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ], ) }} &lt;select name=\"foo\"&gt; &lt;optgroup label=\"Group A\"&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;optgroup label=\"Group B\"&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;\/select&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-19","title":"1.9.3.2.19. telField","content":"{{= telField( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"tel\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-20","title":"1.9.3.2.20. textField","content":"{{= textField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-21","title":"1.9.3.2.21. textarea","content":"{{= textarea ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;textarea name=\"foo\"&gt;bar&lt;\/textarea&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-22","title":"1.9.3.2.22. timeField","content":"{{= timeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"time\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-23","title":"1.9.3.2.23. urlField","content":"{{= urlField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"url\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-2-24","title":"1.9.3.2.24. weekField","content":"{{= weekField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"week\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-3","title":"1.9.3.3. Button Tags","content":"Helpers for various button tags."},{"id":"\/3.x\/helpers\/forms.html#1-9-3-3-1","title":"1.9.3.3.1. button","content":"{{= button ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"button\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-3-2","title":"1.9.3.3.2. imageButton","content":"{{= imageButton ( name: 'foo', src: '\/images\/map.png', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"image\" name=\"foo\" src=\"\/images\/map.png\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-3-3","title":"1.9.3.3.3. submitButton","content":"{{= submitButton ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"submit\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-3-4","title":"1.9.3.3.4. resetButton","content":"{{= resetButton ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"reset\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/3.x\/helpers\/forms.html#1-9-3-4","title":"1.9.3.4. Label Tag","content":"A helper for &lt;label&gt; tags.{{= label ( 'Label For Field', \/\/ (string) label text attr: [], \/\/ (array) optional key-value attributes for: 'field' \/\/ (...mixed) optional named parameter attributes ) }} &lt;label for=\"field\"&gt;Label For Field&lt;\/label&gt; "},{"id":"\/3.x\/helpers\/custom.html#1-9-4","title":"1.9.4. Custom Helpers","content":"You can provide your Template objects with a custom Helpers object. In that custom Helpers object, you can add any helper methods you like. Your helper methods will available inside template files processed by that Template instance."},{"id":"\/3.x\/helpers\/custom.html#1-9-4-1","title":"1.9.4.1. Creating A Helpers Class","content":"The easiest thing to do is extend HtmlHelpers and add a method on that new class.For example, the following custom Helpers class adds a method to ROT-13 a string, escaping it appropriately:&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\HtmlHelpers; class CustomHelpers extends HtmlHelpers { public function rot13(string $str) : string { return $this-&gt;h(str_rot13($str)); } } Alternatively, you can extend the base Helpers object, and use the HtmlHelperMethods trait:&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\HtmlHelperMethods; use Qiq\\Helpers; class CustomHelpers extends Helpers { use HtmlHelperMethods; public function rot13(string $str) : string { return $this-&gt;h(str_rot13($str)); } } Finally, if you are not using HTML at all, you can just extend the Helpers class.&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helpers; class CustomHelpers extends Helpers { public function rot13(string $str) : string { return str_rot13($str); } } "},{"id":"\/3.x\/helpers\/custom.html#1-9-4-2","title":"1.9.4.2. Using Your Helpers\n","content":"Once you have a custom Helpers class, create your Template with an instance of it:use Project\\Template\\Helper\\CustomHelpers; use Qiq\\Template; $template = Template::new( paths: ..., helpers: new CustomHelpers(), ); Now you can use your custom helper methods in a template file, either in plain PHP ...&lt;?= $this-&gt;rot13('Uryyb Jbeyq!'); ?&gt; ... or in Qiq syntax:{{= rot13 ('Uryyb Jbeyq!') }} Either way, the output will be \"Hello World!\"."},{"id":"\/3.x\/helpers\/custom.html#1-9-4-3","title":"1.9.4.3. Helper Classes","content":"If you like, you can put your helper logic in a class, then retrieve an instance of that class from the autowiring Qiq\\Container (described below) using $this-&gt;get().For example, if you put the ROT-13 logic into a class ...&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\Escape; class Rot13 { public function __construct(protected Escape $escape) { } public function __invoke(string $str): string { return $this-&gt;escape-&gt;h(str_rot13($str)); } } ... you can then get() an instance of that class from inside your custom Helpers object and use it as you wish:&lt;?php namespace Project\\Template\\Helper; use Project\\Template\\Helper\\Rot13; use Qiq\\Helper\\Html\\HtmlHelpers; class CustomHelpers extends HelperHelpers { public function rot13(string $str) : string { return $this-&gt;get(Rot13::class)-&gt;__invoke($str); } } "},{"id":"\/3.x\/helpers\/custom.html#1-9-4-4","title":"1.9.4.4. \nHelpers Container","content":"The Helpers class uses an autowiring Qiq\\Container object. In your custom helper methods, you can use $this-&gt;get() to retrieve an object from the Qiq\\Container.To configure the Qiq\\Container, instantiate it with an array of class constructor parameter names and values, and create your Helpers with it. For example, to change the Escape encoding to something other than UTF-8:use Project\\Template\\Helper\\CustomHelpers; use Qiq\\Container; use Qiq\\Helper\\Html\\Escape; use Qiq\\Template; $container = new Container([ Escape::class =&gt; [ 'encoding' =&gt; 'EUC-JP' ], ]); $template = Template::new( paths: ..., helpers: new CustomHelpers($container) ); The Qiq\\Container is relatively low-powered. If you wish, you can replace the Qiq\\Container with any PSR-11 ContainerInterface instance:use Project\\Template\\Helper\\CustomHelpers; use Project\\Psr11Container; use Qiq\\Template; $psr11container = new Psr11Container(); $template = Template::new( paths: ..., helpers: new CustomHelpers($psr11container) ); "},{"id":"\/3.x\/compiler.html#1-10","title":"1.10. Compiler","content":"Although Qiq templates use native PHP, the {{ ... }} syntax sugar does require a compiling process. That process is very simple, even naive, but it does exist: If a compiled template already exists in the cache directory, and is newer than the source template file, the QiqCompiler returns the already-existing compiled template. Otherwise ... The QiqCompiler reads the source template file, splits out the {{ ... }} tags using a regular expression, and retains them as QiqToken objects . The QiqCompiler then invokes each QiqToken to get back the PHP code replacement for the {{ ... }} tag, and reassembles all the parts in order. The compiled template is saved to the compiler cache directory. The same source template will not be compiled again -- at least, not until it gets re-saved, thereby updating its timestamp, making it newer than the compiled version. "},{"id":"\/3.x\/compiler.html#1-10-1","title":"1.10.1. Cache Path","content":"The QiqCompiler cache path by default is your sys_get_temp_dir() directory appended with \/qiq, but you can specify any path with Template::new():$template = Template::new( cachePath: '\/path\/to\/qiqcache\/' ); The QiqCompiler saves the compiled templates in the cache using the full path of the source template file. For example, if the cache path is \/private\/tmp and the source template file is at \/www\/site\/resources\/templates\/foo.php, that means the compiled template file will be cached at:\/private\/tmp\/www\/site\/resources\/templates\/foo.php If you see compiling errors, having the full source template path as part of the cache path will help you find the original template."},{"id":"\/3.x\/compiler.html#1-10-2","title":"1.10.2. Cache Clearing","content":"To clear the cache, reach into the Template to get the Compiler, and call its clear() method.$template-&gt;getCompiler()-&gt;clear(); "},{"id":"\/3.x\/compiler.html#1-10-3","title":"1.10.3. Disabling The Compiler","content":"If you are absolutely certain that you do not want to use Qiq syntax, and will use only PHP in your template files, you can create a Template with $cachePath set to false:$template = Template::new( cachePath: false ); This will cause the Template to use the NonCompiler, which does not compile or cache template files at all."},{"id":"\/3.x\/static-analysis.html#1-11","title":"1.11. Static Analysis","content":"Qiq template files are easily analyzed by static analysis tools such as PHPStan. Only a docblock is required to enable analysis. This docblock is what makes the Template methods, helpers, and variables recognizable by the analyzer."},{"id":"\/3.x\/static-analysis.html#1-11-1","title":"1.11.1. Enabling Analysis","content":"In each template file to be analyzed, add a docblock to specify a type for $this, using an intersection type of Qiq\\Engine and your Helpers object.You should also be sure to document each variable used in the template file.In PHP code, the docblock might look like this ...&lt;?php \/** * @var \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers $this * @var string $name *\/ ?&gt; Hello &lt;?= $this-&gt;h($name) ?&gt;! ... whereas the Qiq syntax might look like this:{{ \/** @var \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers $this *\/ }} {{ \/** @var string $name *\/ }} Hello {{h $name }}! "},{"id":"\/3.x\/static-analysis.html#1-11-1-1","title":"1.11.1.1. Custom Typing","content":"If you find that typehint too verbose, your static analyzer may let you define a custom pseudo-type. For example, a PHPStan configuration entry might define this type alias:parameters: typeAliases: HtmlTemplate: \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers Then in your template file docblock, you can specify $this as the custom type:{{ \/** @var HtmlTemplate $this *\/ }} "},{"id":"\/3.x\/static-analysis.html#1-11-1-2","title":"1.11.1.2. Mixins","content":"Alternatively, you may wish to extend the Template class itself and specify a @mixin for the appropriate Helpers class. For example:namespace Project; use Qiq\\Catalog; use Qiq\\Helper\\Html\\HtmlHelpers; use Qiq\\Template; \/** * @mixin HtmlHelpers *\/ class HtmlTemplate extends Template { public function __construct( Catalog $catalog, HtmlHelpers $helpers ) { parent::__construct($catalog, $helpers) } } Then in your template file docblock, you can use the extended class name:{{ \/** @var Project\\HtmlTemplate $this *\/ }} "},{"id":"\/3.x\/static-analysis.html#1-11-2","title":"1.11.2. Performing Analysis","content":"If your template files are PHP only, that's enough: you can run static analysis against them as they are in their source locations.However, for template files with Qiq syntax, you will need to compile the template files to PHP as a precursor to static analysis. To do so, instantiate the Template class that will render the template files, and compileAll() of the template files in the Catalog:$cachePath = '\/path\/to\/compiled'; $template = Template::new( paths: ..., cachePath: $cachePath, ); $template-&gt;getCatalog()-&gt;compileAll(); You can then run static analysis against the $cachePath directory of compiled template files (not the source template files, since they have non-analyzable Qiq code in them).Given the above $cachePath example, a PHPStan configuration entry for static analysis of the compiled template files might include an entry like this:parameters: paths: - \/path\/to\/compiled\/ "},{"id":"\/3.x\/static-analysis.html#1-11-3","title":"1.11.3. Resolving Analysis Issues","content":"Debugging and resolving issues revealed by static analysis is straightforward.Because the compiled template files are saved in the $cachePath using the source template file path, it is easy to see which source template file contains the issue.Further, because the compiled template code lines match the source template code lines, the reported line numbers match up as well.From there, resolve the issue in the source template file as you would in any other PHP code, recompile, and re-analyze."},{"id":"\/3.x\/upgrading.html#1-12-1","title":"1.12.1. 2.x to 3.x","content":"Upgrading is trivial; there are no public API or functional changes. The only change is that PHP 8.1 is now the minimum required version."},{"id":"\/2.x\/intro.html#2-1-1","title":"2.1.1. Installation","content":"Qiq is installable via Composer as qiq\/qiq:composer require qiq\/qiq ^2.0 "},{"id":"\/2.x\/intro.html#2-1-2","title":"2.1.2. Getting Started","content":"First, a template file, saved at \/path\/to\/templates\/hello.php:Hello, {{h $name }}. That was Qiq! And this is PHP, &lt;?= $this-&gt;h($name) ?&gt;. Next, the presentation code, to generate output using the hello template:use Qiq\\Template; $template = Template::new('\/path\/to\/templates'); $template-&gt;setView('hello'); $template-&gt;setData([ 'name' =&gt; 'World' ]); echo $template(); That's all there is to it."},{"id":"\/2.x\/syntax.html#2-2","title":"2.2. Template Syntax","content":"Qiq templates are native PHP templates, with an optional {{ ... }} syntax for concise escaping and helper use."},{"id":"\/2.x\/syntax.html#2-2-1","title":"2.2.1. Escaping and Output","content":"Qiq will not echo any output itself, unless the opening tag starts with a recognized escaping character: {{ ... }} will not echo at all by itself {{= ... }} will echo raw unescaped output {{h ... }} will echo escaped for HTML content {{a ... }} will echo escaped for HTML attributes {{u ... }} will echo escaped for URLs {{c ... }} will echo escaped for CSS {{j ... }} will echo escaped for JavaScript The {{a ... }} tag offers the additional ability to output an array, using the key as the attribute label and the value as the attribute value; multiple attribute values will be space-separated. The following Qiq code ...&lt;span {{a ['id' =&gt; 'foo', 'class' =&gt; ['bar', 'baz', 'dib']] }}&gt;Text&lt;\/span&gt; ... will render as:&lt;span id=\"foo\" class=\"bar baz dib\"&gt;Text&lt;\/span&gt; You can echo just about any variable, literal, function, method, expression, or constant, including the magic constants __DIR__, __FILE__, and __LINE__.{{h $foo }} {{h \"foo\" }} {{h 1 + 2 }} {{h __FILE__ }} {{h PHP_EOL }} {{h $person-&gt;firstName() }} {{h time() }} If you need to embed double curly braces literally, and not have them interpreted as Qiq tags, put a backslash between the braces. The following Qiq code ...{{ \/* this is qiq code *\/ }} {\\{ this is not qiq code }\\} ... will compile to this PHP code:&lt;?php \/* this is qiq code *\/ ?&gt; {{ this is not qiq code }} "},{"id":"\/2.x\/syntax.html#2-2-2","title":"2.2.2. Control Structures","content":"All control structures are written exactly as in PHP, using the alternative control structure syntax when available, inside {{ ... }} Qiq tags.For example, this Qiq code ...{{ foreach ($foo as $bar =&gt; $baz): }} {{ if ($baz === 0): }} {{= \"First element!\" }} {{ else: }} {{= \"Not the first element.\" }} {{ endif }} {{ endforeach }} ... is the same as this PHP code:&lt;?php foreach ($foo as $bar =&gt; $baz): ?&gt; &lt;?php if ($bar === 0): ?&gt; &lt;?= \"First element!\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php else: ?&gt; &lt;?= \"Not the first element.\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; &lt;?php endforeach ?&gt; "},{"id":"\/2.x\/syntax.html#2-2-3","title":"2.2.3. Helpers","content":"Any code inside Qiq tags, that PHP would recognize as a potential function call, is treated as a Qiq template helper method. Thus, the following Qiq syntax ...{{= label (\"Street Address\", for: 'street') }} {{= textField ( name: 'street', value: $street, ) }} ... is equivalent to this PHP code with Qiq helpers:&lt;?= $this-&gt;label(\"Street Address\", for: 'street') ?&gt; &lt;?= $this-&gt;textField( name: 'street', value: $street, ) ?&gt; You can use helper method names anywhere inside Qiq code with or without the $this-&gt; prefix. In all of the below examples, the anchor() helper result is assigned to a variable:{{ $a_com = anchor ('http:\/\/example.com') }} {{ $a_net = $this-&gt;anchor ('http:\/\/example.net') }} &lt;?php $a_org = $this-&gt;anchor('http:\/\/example.org') ?&gt; "},{"id":"\/2.x\/syntax.html#2-2-4","title":"2.2.4. Undefined Helpers","content":"If a helper method name is not defined, the Helpers class will call it as as PHP function instead. For example, if a time helper method is not defined, the following will call the time PHP function:{{h time () }} However, this may not pass static analysis checks. To improve static analysis results, prefix the call with a backslash to explicitly indicate a PHP function:{{h \\time () }} Alternatively, you may create a custom helper method to override the PHP function."},{"id":"\/2.x\/syntax.html#2-2-5","title":"2.2.5. Other PHP Code","content":"Qiq treats all other code inside {{ ... }} tags as plain old PHP code. For example, this Qiq syntax ...{{ $title = \"Prefix: \" . $title . \" (Suffix)\" }} &lt;title&gt;{{h $title}}&lt;\/title&gt; ... is equivalent to this PHP code with Qiq helpers:&lt;?php $title = \"Prefix: \" . $title . \" (Suffix)\" ?&gt; &lt;title&gt;&lt;?= $this-&gt;h($title) ?&gt;&lt;\/title&gt; "},{"id":"\/2.x\/syntax.html#2-2-6","title":"2.2.6. Whitespace","content":"Qiq goes to some lengths to help control whitespace in output, to keep the compiled template code on the same lines as in the source template, and to help make sure the output is formatted nicely."},{"id":"\/2.x\/syntax.html#2-2-6-1","title":"2.2.6.1. Newlines","content":"Qiq offers intuitive handling of newlines around tags: Non-echoing Qiq tags, just as with plain PHP, will consume any single trailing newline immediately after the closing tag. Echoing Qiq tags, whether raw or escaped, will honor any single trailing newline immediately after the closing tag. For example, this Qiq code ...{{ if ($condition): }} {{= \"foo\" }} {{ endif; }} ... compiles to this PHP code:&lt;?php if ($condition): ?&gt; &lt;?= \"foo\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; Non-echoing Qiq can be made to echo a single leading newline by using a tilde with the opening tag. This Qiq code ...{{~ foreach ($foo as $bar): }} ... {{~ endforeach }} ... compiles to this PHP code:&lt;?= PHP_EOL ?&gt;&lt;?php foreach ($foo as $bar): ?&gt; ... &lt;?= PHP_EOL ?&gt;&lt;?php endforeach ?&gt; This is especially useful with looping output code, where you want to honor newlines at the very beginning and very end of the loop.Echoing Qiq can be made to consume a single trailing newline by using a tilde with the closing tag. This Qiq code ...{{h $foo ~}} ... compiles to this PHP code:&lt;?= $this-&gt;h($foo) ?&gt; A tilde with the closing tag has no effect on non-echoing Qiq code."},{"id":"\/2.x\/syntax.html#2-2-6-2","title":"2.2.6.2. Indenting","content":"Echoing Qiq tags will automatically set the current indent for helpers based on the leading whitespace before the opening Qiq tag.This Qiq code ...&lt;ul&gt; {{= items (['foo', 'bar', 'baz']) }} &lt;\/ul&gt; ... compiles to this PHP code:&lt;ul&gt; &lt;?php $this-&gt;setIndent(\" \") ?&gt;&lt;?= $this-&gt;items(['foo', 'bar', 'baz']) ?&gt; &lt;\/ul&gt; "},{"id":"\/2.x\/data.html#2-3-1","title":"2.3.1. Assigning Variables","content":"To assign a data collection to the Template, use the setData() method and pass either an array or a stdClass object.$template-&gt;setData([ 'items' =&gt; [ [ 'id' =&gt; '1', 'name' =&gt; 'Foo', ], [ 'id' =&gt; '2', 'name' =&gt; 'Bar', ], [ 'id' =&gt; '3', 'name' =&gt; 'Baz', ], ) ]); The setData() method will overwrite all existing data in the Template object.The addData() method, on the other hand, will merge any iterable with the existing Template data.$template-&gt;addData([ 'title' =&gt; 'My Items', ]); "},{"id":"\/2.x\/data.html#2-3-2","title":"2.3.2. Using Assigned Variables","content":"You can then use the assigned data as variables within the template file:&lt;p&gt;{{h $title}}&lt;\/p&gt; &lt;ul&gt; {{ foreach ($items as $id =&gt; $name): }} &lt;li id=\"{{a $id}}\"&gt;{{h $name }}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; "},{"id":"\/2.x\/data.html#2-3-3","title":"2.3.3. Getting Assigned Variables","content":"If you want to get a copy of all assigned data as an array, use getData (). Any changes you make to the copy will be to the copy and not to the data actually assigned to the Template.Alternatively, if you want to get a reference to the array of all assigned data, use &amp;refData(). Any changes you make to the reference will be to the actual assigned data."},{"id":"\/2.x\/data.html#2-3-4","title":"2.3.4. Variable Scope","content":"Data assigned to the Template object with setData() or addData() is shared in every template file by reference. Modifications to an assigned variable in one template file will be shared with all other template files. In the above example, $title and $items are available in every template file. Changes to $title or $items will be shared through other template files.However, variables created inside a template file are local to that template file only. They are not shared with any other template. In the above example, $id and $name (because they are created inside the template file) are local to that template file only, and changes to them will not be seen anywhere else.When designing template files, be careful not to accidentally overwrite assigned variables with local variables. The changes to the assigned values will be shared with all other templates, which may not be what you want.Finally, changes to assigned variables via setData(), addData(), and &amp;refData() from inside a template file will not be honored within that template file, only in the next one rendered. This is because the assigned variables have already been extracted into the current scope; only the next templates to be rendered will see the modified values."},{"id":"\/2.x\/catalog.html#2-4","title":"2.4. Template File Catalog","content":"Qiq will search through any number of directory paths for template files. You can pass an array of paths to Template::new() ...$template = Template::new( paths: [ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ], ); ... or you can tell the Catalog directly:$template-&gt;getCatalog()-&gt;setPaths([ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ]); The Catalog will search for the template file from the first directory path to the last.\/* searches first for: \/path\/to\/custom\/templates\/foo.php and then second for: \/path\/to\/default\/templates\/foo.php *\/ $output = $template('foo'); If you like, you can modify the paths after the Template instantiation to prepend or append a directory path to the Catalog:$template-&gt;getCatalog()-&gt;prependPath('\/higher\/precedence\/templates'); $template-&gt;getCatalog()-&gt;appendPath('\/lower\/precedence\/templates'); "},{"id":"\/2.x\/catalog.html#2-4","title":"2.4. Subdirectories","content":"To render a template file from any location, use the absolute path to the template name (no leading slash is necessary):\/\/ renders the \"foo\/bar\/baz.php\" template $output = $template('foo\/bar\/baz'); Alternatively, while inside a template file, you may refer to other template files by relative path. Use .\/ to indicate a template file in the same directory, or ..\/ to indicate the directory above the current one.Given a template file structure like the following ...foo.php foo\/ bar.php bar\/ baz.php dib.php ... while inside the foo\/bar\/baz.php template file:\/\/ refers to \"foo\/bar\/dib.php\" echo $this-&gt;render('.\/dib'); \/\/ refers to \"foo\/bar.php\" echo $this-&gt;render('..\/bar'); \/\/ refers to \"foo.php\" echo $this-&gt;render('..\/..\/foo'); "},{"id":"\/2.x\/catalog.html#2-4","title":"2.4. File Name Extension","content":"By default, the Catalog will auto-append .php to template file names. If the template files end with a different extension, change it using the setExtension() method:$catalog = $template-&gt;getCatalog(); $catalog-&gt;setExtension('.phtml'); Or, you can set the extension at Template creation time:$template = Template::new( extension: '.qiq.php' ); "},{"id":"\/2.x\/catalog.html#2-4","title":"2.4. Collections","content":"Sometimes it may be useful to identify collections of templates, say for emails or for admin pages. (Other template systems may refer to these as \"groups\", \"folders\", or \"namespaces\".)To associate a directory path with a collection, prefix the path with the collection name and a colon:$template = Template::new( paths: [ 'admin:\/path\/to\/admin\/templates', 'email:\/path\/to\/email\/templates', ] ); To render a template from a collection, prefix the template name with the collection name.$output = $template('email:notify\/subscribed'); You can set, append, and prepend collection paths, the same as you would with the \"main\" or \"default\" collection of unprefixed template paths."},{"id":"\/2.x\/partials.html#2-5","title":"2.5. Partials","content":"Sometimes you will want to split a single template file into multiple files. You can render these \"partial\" template pieces using the render() method in your main template code.When rendering, you can pass an array of variables to be extracted into the local scope of the partial template. (All shared variables assigned to the Template variable will also be available.)For example, a list partial template might look like this:&lt;ul&gt; {{ foreach ($items as $item): }} &lt;li&gt;{{h $item}}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; Then in a main browse template, you can render the partial list:&lt;p&gt;My List&lt;\/p&gt; {{= render ('.\/list', [ 'items' =&gt; ['foo', 'bar', 'baz'] ]) }} The rendered HTML will look something like this:&lt;p&gt;My List&lt;\/p&gt; &lt;ul&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/2.x\/layouts.html#2-6","title":"2.6. Layouts","content":"To wrap a main \"inner\" view template with an \"outer\" layout template, call setLayout() to pick a second \"outer\" template for the second step. (If no layout is set, the second step will not be executed.)Let's say you already have a view template called browse. You might then have a layout template called default to wrap the view. The default.php layout template could look like this:&lt;html&gt; &lt;head&gt; &lt;title&gt;My Site&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; {{= getContent() }} &lt;\/body&gt; &lt;\/html&gt; You can then set the view and layout templates on the Template object and invoke it:$template-&gt;setView('browse'); $template-&gt;setLayout('default'); $output = $template(); The output from the inner view template is automatically retained and becomes available via the getContent() method on the Template object. The layout template then calls getContent() to place the inner view results in the outer layout template. Note: You can also call setLayout() from inside the view template, allowing you to pick a layout as part of the view logic. The view template and the layout template both execute inside the same Template object. This means: All variables assigned to the view are shared with the layout. All helpers are shared between the view and the layout. This sharing situation allows the view to modify data and helpers before the layout is executed."},{"id":"\/2.x\/blocks.html#2-7","title":"2.7. Blocks","content":"Blocks are similar to partials, except that they are captured inline for later use.In general, blocks are used by view templates to capture output for layout templates.Alternatively, blocks may be used by child templates to capture output for parent templates (cf. the inheritance documentation).For example, a layout template file might define a block for local navigation, adding some default content for that block:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; {{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; {{= getBlock () ~}} &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; The setBlock() method opens the specified block; getBlock() closes the block and echoes the captured output from between the two method calls.Then, a view file might redefine that block:{{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent--&gt; {{ parentBlock() }} &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; {{ endBlock () }} Note the use of parentBlock() above. This method is a placeholder for the parent block content, allowing you to prepend and append that content if you like. (If you do not call parentBlock(), the setBlock() call will completely override the parent block content.)Finally, rendering the combined view and layout ...$template = Template::new(...); $template-&gt;setLayout('layout'); $template-&gt;setView('view'); $output = $template(); ... will generate something like the following output:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent --&gt; &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; "},{"id":"\/2.x\/inheritance.html#2-8","title":"2.8. Inheritance","content":"Whereas you can wrap an inner \"view\" template with an outer \"layout\" template, you can also \"extend\" one template with another template. The differences are subtle but important.Here is an example of template inheritance. First, a \"parent\" template, composed of a series of blocks:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; {{ setBlock ('head_title') }}{{= getBlock () ~}} {{ setBlock ('head_meta') }}{{= getBlock () ~}} {{ setBlock ('head_links') }}{{= getBlock () ~}} {{ setBlock ('head_styles') }} &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{= getBlock () ~}} {{ setBlock ('head_scripts') }}{{= getBlock () ~}} &lt;\/head&gt; &lt;body&gt; {{ setBlock ('body_header') }}{{= getBlock () ~}} {{ setBlock ('body_content') }}{{= getBlock () ~}} {{ setBlock ('body_footer') }}{{= getBlock () ~}} &lt;\/body&gt; &lt;\/html&gt; The above code defines a series of blocks via setBlock(), then displays the final block contents via getBlock(). (Note the use of the closing tag ~}} to consume the newline after the tag, which condenses blank lines in the output.)Next, a \"child\" template that extends the \"parent\" template. Note how it extends() the \"parent\" template, and overrides or modifies content from the parent blocks:{{ extends ('parent') }} {{ setBlock ('head_title') }} &lt;title&gt; My Extended Page &lt;\/title&gt; {{ endBlock () }} {{ setBlock ('head_meta') }} &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; {{ endBlock () }} {{ setBlock ('head_styles') }} {{ parentBlock () }} &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{ endBlock () }} {{ setBlock ('body_content') }} &lt;p&gt;The main content for my extended page.&lt;\/p&gt; {{ endBlock () }} Finally, when you render the \"child\" template ...$output = $template('child'); ... the output will look something like this:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;title&gt; My Extended Page &lt;\/title&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;\/head&gt; &lt;body&gt; &lt;p&gt;The main content for my extended page.&lt;\/p&gt; &lt;\/body&gt; &lt;\/html&gt; A similar approach is possible with views and layouts. However, only one layer of extension is possible that way (i.e., from the view to the layout). With extends(), any number of layers is possible.Both views and layouts may use extends(). That is, an inner view may extend one series of templates, and an outer layout may extend a different series of templates.Blocks are shared between both views and layouts. Layout blocks can be referred to by views, and vice versa.Finally, getContent() may not work as expected when extending templates. Any content not in a block will be overwritten with each successive call to extends(), so that only content from the last rendered template will be captured. As such, it is probably best to capture the \"main\" content of a view inside a block of its own, as in the above example, rather than using getContent()."},{"id":"\/2.x\/helpers\/overview.html#2-9-1","title":"2.9.1. Overview","content":"Helpers are class methods that generate output for you. You can address them as methods on $this in PHP template code, or by just the helper name when using Qiq syntax.PHP syntax:&lt;?= $this-&gt;anchor('http:\/\/qiqphp.com', 'Qiq for PHP') ?&gt; Qiq syntax:{{= anchor ('http:\/\/qiqphp.com', 'Qiq for PHP') }} Both generate this HTML:&lt;a href=\"http:\/\/qiqphp.com\"&gt;Qiq for PHP&lt;\/a&gt; Qiq comes with a comprehensive set of helpers for general use, and for building forms. You can also create your own custom helpers.Further, you can call any public or protected Template method from the template file. (This is because the template file is executed \"inside\" the Template object.) Among other things, you can set the layout, or render other templates, from inside any template:{{ setLayout ('seasonal-layout') }} {{= render ('some\/other\/template') }} "},{"id":"\/2.x\/helpers\/general.html#2-9-2","title":"2.9.2. General Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code.Finally, many of these helpers accept a trailing variadic list of named parameters as HTML tag attributes. This means you can add just about any attribute as if it was a parameter on the helper method. Underscores in the parameter name will be converted to dashes; e.g., foo_bar: 'baz' will become foo-bar=\"baz\" in the returned helper output. For attributes that cannot double as named parameters, use the attr array parameter; for example:{{= anchor ( 'http:\/\/qiqphp.com', 'Qiq Project', attr: [ \/\/ (array) optional key-value attributes 'xml:lang' =&gt; 'en', ], id: 'qiq-link', \/\/ (...mixed) optional named parameter attributes ) }} The example code will produce this HTML:&lt;a href=\"http:\/\/qiqphp.com\" xml:lang=\"en\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-1","title":"2.9.2.1. anchor","content":"Helper for &lt;a&gt; tags.{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href 'Qiq Project', \/\/ (string) text attr: [], \/\/ (array) optional key-value attributes id: 'qiq-link', \/\/ (...mixed) optional named parameter attributes ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-2","title":"2.9.2.2. base","content":"Helper for &lt;base&gt; tags.{{= base ( '\/base' \/\/ (string) href ) }} &lt;base href=\"\/base\" \/&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-3","title":"2.9.2.3. dl","content":"Helper for &lt;dl&gt; tags with &lt;dt&gt;\/&lt;dd&gt; items.{{= dl ( [ \/\/ (array) dt keys and dd values 'foo' =&gt; 'Foo Def', 'bar' =&gt; [ 'Bar Def A', 'Bar Def B', 'Bar Def C', ], 'baz' =&gt; 'Baz Def', ], attr: [], \/\/ (array) optional key-value attributes id: 'test' \/\/ (...mixed) optional named parameter attributes ) }} &lt;dl id=\"test\"&gt; &lt;dt&gt;foo&lt;\/dt&gt; &lt;dd&gt;Foo Def&lt;\/dd&gt; &lt;dt&gt;bar&lt;\/dt&gt; &lt;dd&gt;Bar Def A&lt;\/dd&gt; &lt;dd&gt;Bar Def B&lt;\/dd&gt; &lt;dd&gt;Bar Def C&lt;\/dd&gt; &lt;dt&gt;baz&lt;\/dt&gt; &lt;dd&gt;Baz Def&lt;\/dd&gt; &lt;\/dl&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-4","title":"2.9.2.4. image","content":"Helper for &lt;img&gt; tags.{{= image ( '\/images\/hello.jpg', \/\/ (string) image href src attr: [], \/\/ (array) optional key-value attributes id: 'image-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if alt is not specified, uses the basename of the image href --&gt; &lt;img src=\"\/images\/hello.jpg\" alt=\"hello\" id=\"image-id\" \/&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-5","title":"2.9.2.5. items","content":"Helper for a series of &lt;li&gt; tags.{{= items ([ \/\/ (array) list items 'foo', 'bar', 'baz' ]) }} &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-6","title":"2.9.2.6. link","content":"Helper for a &lt;link&gt; tag.{{= link ( rel: 'prev', href: '\/path\/to\/prev', attr: [], \/\/ (array) optional key-value attributes id: 'link-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;link rel=\"prev\" href=\"\/path\/to\/prev\" id=\"link-id\" \/&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-7","title":"2.9.2.7. linkStylesheet","content":"Helper for a &lt;link&gt; stylesheet tag.{{= linkStylesheet ( '\/css\/print.css', \/\/ (string) the stylesheet href attr: [], \/\/ (array) optional key-value attributes media: 'print' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if type is not specified, uses \"text\/css\" --&gt; &lt;!-- if media is not specified, uses \"screen\" --&gt; &lt;link rel=\"stylesheet\" href=\"\/css\/print.css\" type=\"text\/css\" media=\"print\" \/&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-8","title":"2.9.2.8. meta","content":"Helper for a &lt;meta&gt; tag.For general use:{{= meta ( attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} For charset:{{= meta ( charset: 'utf-8' ) }} &lt;meta charset=\"utf-8\"&gt; For http-equiv:{{= meta ( http_equiv: 'Location', content: '\/redirect\/to\/here' ) }} &lt;meta http-equiv=\"Location\" content=\"\/redirect\/to\/here\"&gt; For name:{{= meta ( name: 'author', content: 'Qiq for PHP' ) }} &lt;meta name=\"author\" content=\"Qiq for PHP\"&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-9","title":"2.9.2.9. ol","content":"Helper for &lt;ol&gt; tags with &lt;li&gt; items.{{= ol ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], attr: [], \/\/ (array) optional key-value attributes id: 'foo-list' \/\/ (...mixed) optional named parameter attributes ) }} &lt;ol id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ol&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-10","title":"2.9.2.10. script","content":"Helper for a &lt;script&gt; tag.{{= script ( '\/js\/functions.js', \/\/ (string) src attribute attr: [], \/\/ (array) optional key-value attributes async: true \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- if type is not specified, uses \"text\/javascript\" --&gt; &lt;script src=\"\/js\/functions.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt; "},{"id":"\/2.x\/helpers\/general.html#2-9-2-11","title":"2.9.2.11. ul","content":"Helper for &lt;ul&gt; tags with &lt;li&gt; items.{{= ul ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], attr: [], \/\/ (array) optional key-value attributes id: 'foo-list' \/\/ (...mixed) optional named parameter attributes ) }} &lt;ul id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3","title":"2.9.3. Form Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code.Finally, many of these helpers accept a trailing variadic list of named parameters as HTML tag attributes. This means you can add just about any attribute as if it was a parameter on the helper method. Underscores in the parameter name will be converted to dashes; e.g., foo_bar: 'baz' will become foo-bar=\"baz\" in the returned helper output. For attributes that cannot double as named parameters, use the attr array parameter."},{"id":"\/2.x\/helpers\/forms.html#2-9-3-1","title":"2.9.3.1. Form Tag","content":"Open a form like so:{{= form ( action: '\/hello', attr: [], \/\/ (array) optional key-value attributes id: 'form-id' \/\/ (...mixed) optional named parameter attributes ) }} &lt;!-- defaults to method=\"post\" action=\"\" enctype=\"multipart\/form-data\" --&gt; &lt;form method=\"post\" action=\"\/hello\" enctype=\"multipart\/form-data\" id=\"form-id\"&gt; You can close a form just using &lt;\/form&gt;."},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-1","title":"2.9.3.2.1. checkboxField","content":"{{= checkboxField ( name: 'flag', value: 'foo', checked: true, attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"checkbox\" name=\"flag\" value=\"foo\" checked \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-2","title":"2.9.3.2.2. checkboxFields","content":"The checkboxFields helper can be used for one or more checkboxes at a time, and has greater functionality than the checkboxField helper: The options array specifies one or more checkboxes as part of the field, with each value when checked, and the corresponding label. If the options have more than one element, then field name will be appended automatically with [] to make it an array. The value attribute will be matched against the options and the correct checkboxes will be checked for you. The default parameter, when non-null, will produce a hidden input field for the value when no checkboxes are checked. {{= checkboxFields ( name: 'flags', value: 'bar', default: '', options: [ 'foo' =&gt; 'Foo Flag', 'bar' =&gt; 'Bar Flag', 'baz' =&gt; 'Baz Flag', ], attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"hidden\" name=\"flags\" value=\"\" \/&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"foo\" \/&gt; Foo Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"bar\" checked \/&gt; Bar Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"baz\" \/&gt; Baz Flag&lt;\/label&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-3","title":"2.9.3.2.3. colorField","content":"{{= colorField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"color\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-4","title":"2.9.3.2.4. dateField","content":"{{= dateField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"date\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-5","title":"2.9.3.2.5. datetimeField","content":"{{= datetimeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"datetime\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-6","title":"2.9.3.2.6. datetimeLocalField","content":"{{= datetimeLocalField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"datetime-local\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-7","title":"2.9.3.2.7. emailField","content":"{{= emailField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"email\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-8","title":"2.9.3.2.8. fileField","content":"{{= fileField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"file\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-9","title":"2.9.3.2.9. hiddenField","content":"{{= hiddenField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"hidden\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-10","title":"2.9.3.2.10. inputField","content":"A generic input field; specify the type needed.{{= inputField ( type: 'text', name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-11","title":"2.9.3.2.11. monthField","content":"{{= monthField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"month\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-12","title":"2.9.3.2.12. numberField","content":"{{= numberField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"number\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-13","title":"2.9.3.2.13. passwordField","content":"{{= passwordField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"password\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-14","title":"2.9.3.2.14. radioField","content":"{{= radioField ( name: 'foo', value: 'baz', checked: true, attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-15","title":"2.9.3.2.15. radioFields","content":"The radioFields helper has greater functionality than the radioField helper: The options parameter specfies one or more radio buttons as part of the field, with their value when checked, and their corresponding label. The value parameter will be matched against the options and the correct radio button will be checked for you. {{= radioFields ( name: 'foo', value: 'baz', options: [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label, 'dib' =&gt; 'Dib Label', ), attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"bar\" \/&gt; Bar Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; Baz Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"dib\" \/&gt; Dib Label&lt;\/label&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-16","title":"2.9.3.2.16. rangeField","content":"{{= rangeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"range\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-17","title":"2.9.3.2.17. searchField","content":"{{= searchField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"search\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-18","title":"2.9.3.2.18. select","content":"Use the options parameter to describe the &lt;option&gt; tags.The placeholder parameter is honored as a placeholder label when no option is selected. The default parameter, when non-null, specifies the value of that placeholder.Use multiple: true to set up a multiple select; this will automatically add [] to the name if it is not already there.{{= select ( name: 'foo', value: 'dib', placeholder: 'Please pick one', default: '', options: [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;select name=\"foo\"&gt; &lt;option value=\"\" disabled&gt;Please pick one&lt;\/option&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/select&gt; The helper also supports option groups. If an options array value is itself an array, the key for that element will be used as an &lt;optgroup&gt; label and the array of values will be options under that group.{{= select ( name: 'foo', value: 'bar', options: =&gt; [ 'Group A' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', ], 'Group B' =&gt; [ 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ], ) }} &lt;select name=\"foo\"&gt; &lt;optgroup label=\"Group A\"&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;optgroup label=\"Group B\"&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;\/select&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-19","title":"2.9.3.2.19. telField","content":"{{= telField( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"tel\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-20","title":"2.9.3.2.20. textField","content":"{{= textField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-21","title":"2.9.3.2.21. textarea","content":"{{= textarea ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;textarea name=\"foo\"&gt;bar&lt;\/textarea&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-22","title":"2.9.3.2.22. timeField","content":"{{= timeField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"time\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-23","title":"2.9.3.2.23. urlField","content":"{{= urlField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"url\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-2-24","title":"2.9.3.2.24. weekField","content":"{{= weekField ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"week\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-3","title":"2.9.3.3. Button Tags","content":"Helpers for various button tags."},{"id":"\/2.x\/helpers\/forms.html#2-9-3-3-1","title":"2.9.3.3.1. button","content":"{{= button ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"button\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-3-2","title":"2.9.3.3.2. imageButton","content":"{{= imageButton ( name: 'foo', src: '\/images\/map.png', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"image\" name=\"foo\" src=\"\/images\/map.png\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-3-3","title":"2.9.3.3.3. submitButton","content":"{{= submitButton ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"submit\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-3-4","title":"2.9.3.3.4. resetButton","content":"{{= resetButton ( name: 'foo', value: 'bar', attr: [], \/\/ (array) optional key-value attributes ... \/\/ (...mixed) optional named parameter attributes ) }} &lt;input type=\"reset\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/2.x\/helpers\/forms.html#2-9-3-4","title":"2.9.3.4. Label Tag","content":"A helper for &lt;label&gt; tags.{{= label ( 'Label For Field', \/\/ (string) label text attr: [], \/\/ (array) optional key-value attributes for: 'field' \/\/ (...mixed) optional named parameter attributes ) }} &lt;label for=\"field\"&gt;Label For Field&lt;\/label&gt; "},{"id":"\/2.x\/helpers\/custom.html#2-9-4","title":"2.9.4. Custom Helpers","content":"You can provide your Template objects with a custom Helpers object. In that custom Helpers object, you can add any helper methods you like. Your helper methods will available inside template files processed by that Template instance."},{"id":"\/2.x\/helpers\/custom.html#2-9-4-1","title":"2.9.4.1. Creating A Helpers Class","content":"The easiest thing to do is extend HtmlHelpers and add a method on that new class.For example, the following custom Helpers class adds a method to ROT-13 a string, escaping it appropriately:&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\HtmlHelpers; class CustomHelpers extends HtmlHelpers { public function rot13(string $str) : string { return $this-&gt;h(str_rot13($str)); } } Alternatively, you can extend the base Helpers object, and use the HtmlHelperMethods trait:&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\HtmlHelperMethods; use Qiq\\Helpers; class CustomHelpers extends Helpers { use HtmlHelperMethods; public function rot13(string $str) : string { return $this-&gt;h(str_rot13($str)); } } Finally, if you are not using HTML at all, you can just extend the Helpers class.&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helpers; class CustomHelpers extends Helpers { public function rot13(string $str) : string { return str_rot13($str); } } "},{"id":"\/2.x\/helpers\/custom.html#2-9-4-2","title":"2.9.4.2. Using Your Helpers\n","content":"Once you have a custom Helpers class, create your Template with an instance of it:use Project\\Template\\Helper\\CustomHelpers; use Qiq\\Template; $template = Template::new( paths: ..., helpers: new CustomHelpers(), ); Now you can use your custom helper methods in a template file, either in plain PHP ...&lt;?= $this-&gt;rot13('Uryyb Jbeyq!'); ?&gt; ... or in Qiq syntax:{{= rot13 ('Uryyb Jbeyq!') }} Either way, the output will be \"Hello World!\"."},{"id":"\/2.x\/helpers\/custom.html#2-9-4-3","title":"2.9.4.3. Helper Classes","content":"If you like, you can put your helper logic in a class, then retrieve an instance of that class from the autowiring Qiq\\Container (described below) using $this-&gt;get().For example, if you put the ROT-13 logic into a class ...&lt;?php namespace Project\\Template\\Helper; use Qiq\\Helper\\Html\\Escape; class Rot13 { public function __construct(protected Escape $escape) { } public function __invoke(string $str): string { return $this-&gt;escape-&gt;h(str_rot13($str)); } } ... you can then get() an instance of that class from inside your custom Helpers object and use it as you wish:&lt;?php namespace Project\\Template\\Helper; use Project\\Template\\Helper\\Rot13; use Qiq\\Helper\\Html\\HtmlHelpers; class CustomHelpers extends HelperHelpers { public function rot13(string $str) : string { return $this-&gt;get(Rot13::class)-&gt;__invoke($str); } } "},{"id":"\/2.x\/helpers\/custom.html#2-9-4-4","title":"2.9.4.4. \nHelpers Container","content":"The Helpers class uses an autowiring Qiq\\Container object. In your custom helper methods, you can use $this-&gt;get() to retrieve an object from the Qiq\\Container.To configure the Qiq\\Container, instantiate it with an array of class constructor parameter names and values, and create your Helpers with it. For example, to change the Escape encoding to something other than UTF-8:use Project\\Template\\Helper\\CustomHelpers; use Qiq\\Container; use Qiq\\Helper\\Html\\Escape; use Qiq\\Template; $container = new Container([ Escape::class =&gt; [ 'encoding' =&gt; 'EUC-JP' ], ]); $template = Template::new( paths: ..., helpers: new CustomHelpers($container) ); The Qiq\\Container is relatively low-powered. If you wish, you can replace the Qiq\\Container with any PSR-11 ContainerInterface instance:use Project\\Template\\Helper\\CustomHelpers; use Project\\Psr11Container; use Qiq\\Template; $psr11container = new Psr11Container(); $template = Template::new( paths: ..., helpers: new CustomHelpers($psr11container) ); "},{"id":"\/2.x\/compiler.html#2-10","title":"2.10. Compiler","content":"Although Qiq templates use native PHP, the {{ ... }} syntax sugar does require a compiling process. That process is very simple, even naive, but it does exist: If a compiled template already exists in the cache directory, and is newer than the source template file, the QiqCompiler returns the already-existing compiled template. Otherwise ... The QiqCompiler reads the source template file, splits out the {{ ... }} tags using a regular expression, and retains them as QiqToken objects . The QiqCompiler then invokes each QiqToken to get back the PHP code replacement for the {{ ... }} tag, and reassembles all the parts in order. The compiled template is saved to the compiler cache directory. The same source template will not be compiled again -- at least, not until it gets re-saved, thereby updating its timestamp, making it newer than the compiled version. "},{"id":"\/2.x\/compiler.html#2-10-1","title":"2.10.1. Cache Path","content":"The QiqCompiler cache path by default is your sys_get_temp_dir() directory appended with \/qiq, but you can specify any path with Template::new():$template = Template::new( cachePath: '\/path\/to\/qiqcache\/' ); The QiqCompiler saves the compiled templates in the cache using the full path of the source template file. For example, if the cache path is \/private\/tmp and the source template file is at \/www\/site\/resources\/templates\/foo.php, that means the compiled template file will be cached at:\/private\/tmp\/www\/site\/resources\/templates\/foo.php If you see compiling errors, having the full source template path as part of the cache path will help you find the original template."},{"id":"\/2.x\/compiler.html#2-10-2","title":"2.10.2. Cache Clearing","content":"To clear the cache, reach into the Template to get the Compiler, and call its clear() method.$template-&gt;getCompiler()-&gt;clear(); "},{"id":"\/2.x\/compiler.html#2-10-3","title":"2.10.3. Disabling The Compiler","content":"If you are absolutely certain that you do not want to use Qiq syntax, and will use only PHP in your template files, you can create a Template with $cachePath set to false:$template = Template::new( cachePath: false ); This will cause the Template to use the NonCompiler, which does not compile or cache template files at all."},{"id":"\/2.x\/static-analysis.html#2-11","title":"2.11. Static Analysis","content":"Qiq template files are easily analyzed by static analysis tools such as PHPStan. Only a docblock is required to enable analysis. This docblock is what makes the Template methods, helpers, and variables recognizable by the analyzer."},{"id":"\/2.x\/static-analysis.html#2-11-1","title":"2.11.1. Enabling Analysis","content":"In each template file to be analyzed, add a docblock to specify a type for $this, using an intersection type of Qiq\\Engine and your Helpers object.You should also be sure to document each variable used in the template file.In PHP code, the docblock might look like this ...&lt;?php \/** * @var \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers $this * @var string $name *\/ ?&gt; Hello &lt;?= $this-&gt;h($name) ?&gt;! ... whereas the Qiq syntax might look like this:{{ \/** @var \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers $this *\/ }} {{ \/** @var string $name *\/ }} Hello {{h $name }}! "},{"id":"\/2.x\/static-analysis.html#2-11-1-1","title":"2.11.1.1. Custom Typing","content":"If you find that typehint too verbose, your static analyzer may let you define a custom pseudo-type. For example, a PHPStan configuration entry might define this type alias:parameters: typeAliases: HtmlTemplate: \\Qiq\\Engine&amp;\\Qiq\\Helper\\Html\\HtmlHelpers Then in your template file docblock, you can specify $this as the custom type:{{ \/** @var HtmlTemplate $this *\/ }} "},{"id":"\/2.x\/static-analysis.html#2-11-1-2","title":"2.11.1.2. Mixins","content":"Alternatively, you may wish to extend the Template class itself and specify a @mixin for the appropriate Helpers class. For example:namespace Project; use Qiq\\Catalog; use Qiq\\Helper\\Html\\HtmlHelpers; use Qiq\\Template; \/** * @mixin HtmlHelpers *\/ class HtmlTemplate extends Template { public function __construct( Catalog $catalog, HtmlHelpers $helpers ) { parent::__construct($catalog, $helpers) } } Then in your template file docblock, you can use the extended class name:{{ \/** @var Project\\HtmlTemplate $this *\/ }} "},{"id":"\/2.x\/static-analysis.html#2-11-2","title":"2.11.2. Performing Analysis","content":"If your template files are PHP only, that's enough: you can run static analysis against them as they are in their source locations.However, for template files with Qiq syntax, you will need to compile the template files to PHP as a precursor to static analysis. To do so, instantiate the Template class that will render the template files, and compileAll() of the template files in the Catalog:$cachePath = '\/path\/to\/compiled'; $template = Template::new( paths: ..., cachePath: $cachePath, ); $template-&gt;getCatalog()-&gt;compileAll(); You can then run static analysis against the $cachePath directory of compiled template files (not the source template files, since they have non-analyzable Qiq code in them).Given the above $cachePath example, a PHPStan configuration entry for static analysis of the compiled template files might include an entry like this:parameters: paths: - \/path\/to\/compiled\/ "},{"id":"\/2.x\/static-analysis.html#2-11-3","title":"2.11.3. Resolving Analysis Issues","content":"Debugging and resolving issues revealed by static analysis is straightforward.Because the compiled template files are saved in the $cachePath using the source template file path, it is easy to see which source template file contains the issue.Further, because the compiled template code lines match the source template code lines, the reported line numbers match up as well.From there, resolve the issue in the source template file as you would in any other PHP code, recompile, and re-analyze."},{"id":"\/2.x\/upgrading.html#2-12-1","title":"2.12.1. 1.x to 2.x","content":"Upgrading from Qiq 1.x to 2.x is straightforward but may be time consuming."},{"id":"\/2.x\/upgrading.html#2-12-1-1","title":"2.12.1.1. Assigned Variables","content":"Magic __get(), __set(), etc. access to assigned variables has been removed.This means template files no longer use $this-&gt;var for assigned variables.Instead, they now use $var (without the $this-&gt; prefix). This is in support of static analysis in template files.If you need to modify the assigned variables directly, use &amp;refData() to get a reference to the array of assigned data. Modifications to this array will be honored on the next call to render()."},{"id":"\/2.x\/upgrading.html#2-12-1-2","title":"2.12.1.2. Sections and Blocks","content":"Sections have been removed entirely in favor of blocks. Instead of setSection(), preSection(), addSection(), and getSection(), use setBlock(), parentBlock(), and getBlock(). Please see the blocks documentation for more information."},{"id":"\/2.x\/upgrading.html#2-12-1-3","title":"2.12.1.3. Helpers","content":"The HelperLocator has been removed entirely in favor of Helpers and a Container. If you have custom helpers, you will need to following the custom helpers documentation to make them available in your templates.The tag-related helpers no longer use arrays for attributes; instead, they use named parameters. For example, an input text field helper in 1.x would have been called like this:{{= textField ([ 'name' =&gt; 'foo', 'value' =&gt; 'foo text', 'id' =&gt; 'foo-id', ]) }} In 2.x, you call it like this; note that the array and its keys are replaced by named parameters:{{= textField ( name: 'foo', value: 'foo text', id: 'foo-id', ) }} As a transitional aid, you may use the spread (...) operator to expand the array into named parameters:{{= textField (...[ 'name' =&gt; 'foo', 'value' =&gt; 'foo text', 'id' =&gt; 'foo-id', ]) }} Further: All HTML helpers have been moved from the Qiq\\Helper namespace to the Qiq\\Helper\\Html namespace; the Helper class has been renamed to TagHelper. The Escape class is now defined in the the Qiq\\Helper\\Html namespace, not the Qiq namespace. The attribute builder no longer honors the _raw pseudo-attribute. If you want tag body text to be unescaped, you will need to build it manually. The _default pseudo-attribute in various form-related helpers has been replaced with the named parameter default. The _options pseudo-attribute in various form-related helpers has been replaced with the named parameter options. "},{"id":"\/2.x\/upgrading.html#2-12-1-4","title":"2.12.1.4. Static Analysis","content":"All Qiq code now declares strict_types=1 and is covered by static analysis. Normally this would mean your calling code might have to be more strict about what it sends to Qiq.However, most string-like parameters are typed as mixed, with @param docblocks indicating the type as null|scalar|Stringable (or arrays thereof). This is because casting a mixed value to string is flagged by static analysis tools when being escaped for string output.As a result, you should not have to recast the values you send to Qiq much, if at all -- but be aware of these changes nonetheless."},{"id":"\/2.x\/upgrading.html#2-12-1-5","title":"2.12.1.5. Other Changes","content":" An Engine interface has been introduced. TemplateCore has been renamed to Kernel, and implements the Engine interface. Template::new() has been moved to Kernel::new(). TemplateLocator has been renamed to Catalog; TemplateLocator::get() is now Catalog::getCompiled(). The Compiler interface is now defined in the Qiq namespace, not the Qiq\\Compiler namespace. The Exception class is now defined in the Qiq namespace, not the Qiq\\Exception namespace. The HelperNotFound exception has been renamed to ObjectNotFound, and implements the PSR-11 NotFoundExceptionInterface. The TemplateNotFound exception has been renamed to FileNotFound. The Indent class now uses instance methods, not static methods, and is shared as an instance in the Container. "},{"id":"\/1.x\/intro.html#3-1-1","title":"3.1.1. Installation","content":"Qiq is installable via Composer as qiq\/qiq:composer require qiq\/qiq ^1.0 "},{"id":"\/1.x\/intro.html#3-1-2","title":"3.1.2. Getting Started","content":"First, a template file, saved at \/path\/to\/templates\/hello.php:Hello, {{h $this-&gt;name }}. That was Qiq! And this is PHP, &lt;?= $this-&gt;h($this-&gt;name) ?&gt;. Next, the presentation code, to generate output using the hello template:use Qiq\\Template; $tpl = Template::new('\/path\/to\/templates'); $tpl-&gt;setView('hello'); $tpl-&gt;setData([ 'name' =&gt; 'World' ]); echo $tpl(); That's all there is to it."},{"id":"\/1.x\/syntax.html#3-2","title":"3.2. Template Syntax","content":"Qiq templates are native PHP templates, with an optional {{ ... }} syntax for concise escaping and helper use."},{"id":"\/1.x\/syntax.html#3-2-1","title":"3.2.1. Escaping and Output","content":"Qiq will not echo any output itself, unless the opening tag starts with a recognized escaping character: {{ ... }} will not echo at all by itself {{= ... }} will echo raw unescaped output {{h ... }} will echo escaped for HTML content {{a ... }} will echo escaped for HTML attributes {{u ... }} will echo escaped for URLs {{c ... }} will echo escaped for CSS {{j ... }} will echo escaped for JavaScript The {{a ... }} tag offers the additional ability to output an array, using the key as the attribute label and the value as the attribute value; multiple attribute values will be space-separated. The following Qiq code ...&lt;span {{a ['id' =&gt; 'foo', 'class' =&gt; ['bar', 'baz', 'dib']] }}&gt;Text&lt;\/span&gt; ... will render as:&lt;span id=\"foo\" class=\"bar baz dib\"&gt;Text&lt;\/span&gt; You can echo just about any variable, literal, function, method, expression, or constant, including the magic constants __DIR__, __FILE__, and __LINE__.{{h $this-&gt;foo }} {{h $foo }} {{h \"foo\" }} {{h 1 + 2 }} {{h __FILE__ }} {{h PHP_EOL }} {{h $person-&gt;firstName() }} {{h time() }} If you need to embed double curly braces literally, and not have them interpreted as Qiq tags, put a backslash between the braces. The following Qiq code ...{{ \/* this is qiq code *\/ }} {\\{ this is not qiq code }\\} ... will compile to this PHP code:&lt;?php \/* this is qiq code *\/ ?&gt; {{ this is not qiq code }} "},{"id":"\/1.x\/syntax.html#3-2-2","title":"3.2.2. Control Structures","content":"All control structures are written exactly as in PHP, using the alternative control structure syntax when available, inside {{ ... }} Qiq tags.For example, this Qiq code ...{{ foreach ($foo as $bar =&gt; $baz): }} {{ if ($baz === 0): }} {{= \"First element!\" }} {{ else: }} {{= \"Not the first element.\" }} {{ endif }} {{ endforeach }} ... is the same as this PHP code:&lt;?php foreach ($foo as $bar =&gt; $baz): ?&gt; &lt;?php if ($bar === 0): ?&gt; &lt;?= \"First element!\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php else: ?&gt; &lt;?= \"Not the first element.\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; &lt;?php endforeach ?&gt; Qiq syntax recognizes most PHP control structures: break continue declare for, endfor foreach, endforeach goto if, elseif, else, endif include, include_once require, require_once while, endwhile Qiq does not recognize else if, switch, case, or match; for these, you can always fall back to plain PHP."},{"id":"\/1.x\/syntax.html#3-2-3","title":"3.2.3. Reserved Words","content":"Qiq recognizes the following reserved words. empty isset list namespace use "},{"id":"\/1.x\/syntax.html#3-2-4","title":"3.2.4. Helpers","content":"Any opening keyword Qiq does not recognize is treated as a template helper method. The following Qiq syntax ...{{= label (\"Street Address\", ['for' =&gt; 'street']) }} {{= textField ([ 'name' =&gt; 'street', 'value' =&gt; $this-&gt;street, ]) }} ... is equivalent to this PHP code with Qiq helpers:&lt;?= $this-&gt;label(\"Street Address\", ['for' =&gt; 'street']) ?&gt; &lt;?= $this-&gt;textField([ 'name' =&gt; 'street', 'value' =&gt; $this-&gt;street, ]) ?&gt; "},{"id":"\/1.x\/syntax.html#3-2-5","title":"3.2.5. Other PHP Code","content":"Qiq treats all other code inside {{ ... }} tags as plain old PHP code. For example, this Qiq syntax ...{{ $title = \"Prefix: \" . $this-&gt;title . \" (Suffix)\" }} &lt;title&gt;{{h $title}}&lt;\/title&gt; ... is equivalent to this PHP code with Qiq helpers:&lt;?php $title = \"Prefix: \" . $this-&gt;title . \" (Suffix)\" ?&gt; &lt;title&gt;&lt;?= $this-&gt;h($title) ?&gt;&lt;\/title&gt; "},{"id":"\/1.x\/syntax.html#3-2-6","title":"3.2.6. Whitespace","content":"Qiq goes to some lengths to help control whitespace in output, to keep the compiled template code on the same lines as in the source template, and to help make sure the output is formatted nicely."},{"id":"\/1.x\/syntax.html#3-2-6-1","title":"3.2.6.1. Newlines","content":"Qiq offers intuitive handling of newlines around tags: Non-echoing Qiq tags, just as with plain PHP, will consume any single trailing newline immediately after the closing tag. Echoing Qiq tags, whether raw or escaped, will honor any single trailing newline immediately after the closing tag. For example, this Qiq code ...{{ if ($this-&gt;condition): }} {{= \"foo\" }} {{ endif; }} ... compiles to this PHP code:&lt;?php if ($this-&gt;condition): ?&gt; &lt;?= \"foo\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; Non-echoing Qiq can be made to echo a single leading newline by using a tilde with the opening tag. This Qiq code ...{{~ foreach ($foo as $bar): }} ... {{~ endforeach }} ... compiles to this PHP code:&lt;?= PHP_EOL ?&gt;&lt;?php foreach ($foo as $bar): ?&gt; ... &lt;?= PHP_EOL ?&gt;&lt;?php endforeach ?&gt; This is especially useful with looping output code, where you want to honor newlines at the very beginning and very end of the loop.Echoing Qiq can be made to consume a single trailing newline by using a tilde with the closing tag. This Qiq code ...{{h $foo ~}} ... compiles to this PHP code:&lt;?= $this-&gt;h($foo) ?&gt; A tilde with the closing tag has no effect on non-echoing Qiq code."},{"id":"\/1.x\/syntax.html#3-2-6-2","title":"3.2.6.2. Indenting","content":"Echoing Qiq tags will automatically set the current indent for helpers based on the leading whitespace before the opening Qiq tag.This Qiq code ...&lt;ul&gt; {{= $this-&gt;items(['foo', 'bar', 'baz']) }} &lt;\/ul&gt; ... compiles to this PHP code:&lt;ul&gt; &lt;?php \\Qiq\\Indent::set(' ') ?&gt;&lt;?= $this-&gt;items(['foo', 'bar', 'baz']) ?&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/data.html#3-3","title":"3.3. Template Data","content":"To assign a data collection to the Template, use the setData() method and pass either an array or a stdClass object.$tpl-&gt;setData([ 'items' =&gt; [ [ 'id' =&gt; '1', 'name' =&gt; 'Foo', ], [ 'id' =&gt; '2', 'name' =&gt; 'Bar', ], [ 'id' =&gt; '3', 'name' =&gt; 'Baz', ], ) ]); The setData() method will overwrite all existing data in the Template object.The addData() method, on the other hand, will merge any iterable with the existing Template data.$tpl-&gt;addData([ 'title' =&gt; 'My Items', ]); You can then use the data elements as if they are properties of $this inside the template:&lt;p&gt;{{h $this-&gt;title}}&lt;\/p&gt; &lt;ul&gt; {{ foreach ($this-&gt;items as $id =&gt; $name): }} &lt;li id=\"{{a $id}}\"&gt;{{h $name }}&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/locator.html#3-4","title":"3.4. Template Locator","content":"Qiq will search through any number of directory paths for named templates. You can pass an array of paths to Template::new() ...$tpl = Template::new( paths: [ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ], ); ... or you can tell the TemplateLocator directly:$tpl-&gt;getTempLatelocator()-&gt;setPaths([ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ]); The TemplateLocator will search for the named template from the first directory path to the last.\/* searches first for: \/path\/to\/custom\/templates\/foo.php, and then second for: \/path\/to\/default\/templates\/foo.php *\/ $output = $tpl('foo'); If you like, you can modify the paths after the Template instantiation to append or prepend a directory path to the TemplateLocator:$tpl-&gt;getTemplateLocator()-&gt;prependPath('\/higher\/precedence\/templates'); $tpl-&gt;getTemplateLocator()-&gt;appendPath('\/lower\/precedence\/templates'); "},{"id":"\/1.x\/locator.html#3-4","title":"3.4. Subdirectories","content":"To render a template from any location, use the absolute path to the template name:\/\/ renders the \"foo\/bar\/baz.php\" template $output = $tpl('foo\/bar\/baz'); Alternatively, while inside a template, you may refer to template names by relative path. Use .\/ to indicate a template in the same directory, or ..\/ to indicate the directory above the current one.Given a template file structure like the following ...foo.php foo\/ bar.php bar\/ baz.php dib.php ... while inside the foo\/bar\/baz.php template file:\/\/ refers to \"foo\/bar\/dib.php\" echo $this-&gt;render('.\/dib'); \/\/ refers to \"foo\/bar.php\" echo $this-&gt;render('..\/bar'); \/\/ refers to \"foo.php\" echo $this-&gt;render('..\/..\/foo'); "},{"id":"\/1.x\/locator.html#3-4","title":"3.4. File Name Extension","content":"By default, the TemplateLocator will auto-append .php to template file names. If the template files end with a different extension, change it using the setExtension() method:$templateLocator = $tpl-&gt;getTempLatelocator(); $templateLocator-&gt;setExtension('.phtml'); Or, you can set it at Template creation time:$tpl = Template::new( extension: '.phtml' ); "},{"id":"\/1.x\/locator.html#3-4","title":"3.4. Collections","content":"Sometimes it may be useful to identify collections of templates, say for emails or for admin pages. (Other systems may refer to these as \"groups\", \"folders\", or \"namespaces\".)To associate a directory path with a collection, prefix the path with the collection name and a colon:$tpl = new Template( paths: [ 'admin:\/path\/to\/admin\/templates', 'email:\/path\/to\/email\/templates', ] ); To render a template from a collection, prefix the template name with the collection name.$output = $tpl('email:notify\/subscribed'); You can set, append, and prepend collection paths, the same as you would with the \"main\" or \"default\" collection of unprefixed template paths."},{"id":"\/1.x\/partials.html#3-5","title":"3.5. Partials","content":"Sometimes you will want to split a single template into multiple pieces. You can render these \"partial\" template pieces using the render() method in your main template code.When rendering, you can pass an array of variables to be extracted into the local scope of the partial template. (The main $this Template variable will always be available regardless.)For example, a list partial template might look like this:&lt;ul&gt; {{ foreach ($items as $item): }} &lt;li&gt;{{h $item}}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; Then in a main browse template, you can render the partial list:&lt;p&gt;My List&lt;\/p&gt; {{= render ('list', [ 'items' =&gt; 'foo', 'bar', 'baz'] ]) }} The rendered HTML will look something like this:&lt;p&gt;My List&lt;\/p&gt; &lt;ul&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/layouts.html#3-6","title":"3.6. Layouts","content":"To wrap a main \"inner\" view template with an \"outer\" layout template, call setLayout() to pick a second \"outer\" template for the second step. (If no layout is set, the second step will not be executed.)Let's say you already have a view template called browse. You might then have a layout template called default to wrap the view. The default.php layout template could look like this:&lt;html&gt; &lt;head&gt; &lt;title&gt;My Site&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; {{= getContent() }} &lt;\/body&gt; &lt;\/html&gt; You can then set the view and layout templates on the Template object and invoke it:$tpl-&gt;setView('browse'); $tpl-&gt;setLayout('default'); $output = $tpl(); The output from the inner view template is automatically retained and becomes available via the getContent() method on the Template object. The layout template then calls getContent() to place the inner view results in the outer layout template. Note: You can also call setLayout() from inside the view template, allowing you to pick a layout as part of the view logic. The view template and the layout template both execute inside the same Template object. This means: All data values are shared between the view and the layout. Any data assigned to the view, or modified by the view, is used as-is by the layout. All helpers are shared between the view and the layout. This sharing situation allows the view to modify data and helpers before the layout is executed. All section bodies and blocks are shared between the view and the layout. A section or block that is captured from the view template can therefore be used by the layout template. "},{"id":"\/1.x\/sections.html#3-7","title":"3.7. Sections","content":"Sections are similar to partials, except that they are captured inline for later use. In general, they are used by view templates to capture output for layout templates.For example, you can capture output in the view template to a named section ...{{ setSection ('local-nav') }} &lt;!-- ... local navigation items ... --&gt; {{ endSection () }} ... and then use that output in a layout template:&lt;div id=\"local-nav\"&gt; {{= getSection ('local-nav') }} &lt;\/div&gt; Using setSection() will overwrite any previous content for that section. Use preSection() to prepend, and addSection() to append, to a section.{{ preSection ('local-nav')}} &lt;!-- add items to the top of the nav --&gt; {{ endSection() }} {{ addSection ('local-nav')}} &lt;!-- add items to the end of the nav --&gt; {{ endSection() }} You can see if a section exists using hasSection():{{ if ($this-&gt;hasSection('local-nav')): }} &lt;div id=\"local-nav\"&gt; {{= getSection ('local-nav') }} &lt;\/div&gt; {{ endif }} "},{"id":"\/1.x\/blocks.html#3-8","title":"3.8. Blocks","content":"Blocks and sections serve similar purposes, but have different implementations and features.Blocks are similar to partials, except that they are captured inline for later use. In general, blocks are used by view templates to capture output for layout templates.Alternatively, blocks may be used by child templates to capture output for parent templates (cf. the inheritance documentation).For example, a layout template file might define a block for local navigation, adding some default content for that block:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; {{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; {{= getBlock () ~}} &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; The setBlock() method opens the specified block; getBlock() closes the block and echoes the captured output between the two method calls.Then, a view file might redefine that block:{{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent--&gt; {{ parentBlock() }} &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; {{ endBlock () }} Note the use of parentBlock() above. This method is a placeholder for the parent block content, allowing you to prepend and append that content if you like. (If you do not call parentBlock(), the setBlock() call will completely override the parent block content.)Finally, rendering the combined view and layout ...$template = Template::new(...); $template-&gt;setLayout('layout'); $template-&gt;setView('view'); $output = $template(); ... will generate something like the following output:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent --&gt; &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; "},{"id":"\/1.x\/inheritance.html#3-9","title":"3.9. Inheritance","content":"Whereas you can wrap an inner \"view\" template with an outer \"layout\" template, you can also \"extend\" one template with another template. The differences are subtle but important.Here is an example of template inheritance. First, a \"parent\" template, composed of a series of blocks:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; {{ setBlock ('head_title') }}{{= getBlock () ~}} {{ setBlock ('head_meta') }}{{= getBlock () ~}} {{ setBlock ('head_links') }}{{= getBlock () ~}} {{ setBlock ('head_styles') }} &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{= getBlock () ~}} {{ setBlock ('head_scripts') }}{{= getBlock () ~}} &lt;\/head&gt; &lt;body&gt; {{ setBlock ('body_header') }}{{= getBlock () ~}} {{ setBlock ('body_content') }}{{= getBlock () ~}} {{ setBlock ('body_footer') }}{{= getBlock () ~}} &lt;\/body&gt; &lt;\/html&gt; The above code defines a series of blocks via setBlock(), then displays the final block contents via getBlock(). (Note the use of the closing tag ~}} to consume the newline after the tag, which condenses blank lines in the output.)Next, a \"child\" template that extends the \"parent\" template. Note how it extends() the \"parent\" template, and overrides or modifies content from the parent blocks:{{ extends ('parent') }} {{ setBlock ('head_title') }} &lt;title&gt; My Extended Page &lt;\/title&gt; {{ endBlock () }} {{ setBlock ('head_meta') }} &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; {{ endBlock () }} {{ setBlock ('head_styles') }} {{ parentBlock () }} &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{ endBlock () }} {{ setBlock ('body_content') }} &lt;p&gt;The main content for my extended page.&lt;\/p&gt; {{ endBlock () }} Finally, when you render the \"child\" template ...$output = $tpl('child'); ... the output will look something like this:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;title&gt; My Extended Page &lt;\/title&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;\/head&gt; &lt;body&gt; &lt;p&gt;The main content for my extended page.&lt;\/p&gt; &lt;\/body&gt; &lt;\/html&gt; A similar approach is possible with views and layouts. However, only one layer of extension is possible that way (i.e., from the view to the layout). With extends(), any number of layers is possible.Both views and layouts may use extends(). That is, an inner view may extend one series of templates, and an outer layout may extend a different series of templates.Blocks are shared between both views and layouts. Layout blocks can be referred to by views, and vice versa.Finally, getContent() may not work as expected when extending templates. Any content not in a block will be overwritten with each successive call to extends(), so that only content from the last rendered template will be captured. As such, it is probably best to capture the \"main\" content of a view inside a block of its own, as in the above example, rather than using getContent()."},{"id":"\/1.x\/helpers\/overview.html#3-10-1","title":"3.10.1. Overview","content":"Helpers are invokable objects that generate HTML for you. You can address them as methods on $this in PHP template code, or by just the helper name when using Qiq syntax.PHP syntax:&lt;?= $this-&gt;anchor('http:\/\/qiqphp.com', 'Qiq for PHP') ?&gt; Qiq syntax:{{= anchor ('http:\/\/qiqphp.com', 'Qiq for PHP') }} Both generate this HTML:&lt;a href=\"http:\/\/qiqphp.com\"&gt;Qiq for PHP&lt;\/a&gt; Qiq comes with a comprehensive set of helpers for general use, and for building forms. You can also create your own custom helpers.Further, you can call any public or protected Template method from the template code. (This is because the template code is executed \"inside\" the Template object.) Among other things, you can set the layout, or render other templates, from inside any template:{{ setLayout ('seasonal-layout') }} {{= render ('some\/other\/template') }} "},{"id":"\/1.x\/helpers\/general.html#3-10-2","title":"3.10.2. General Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code."},{"id":"\/1.x\/helpers\/general.html#3-10-2-1","title":"3.10.2.1. anchor","content":"Helper for &lt;a&gt; tags.{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href 'Qiq Project', \/\/ (string) text [ \/\/ (array) optional attributes 'id' =&gt; 'qiq-link' ] ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; To output the anchor text without escaping, use the pseudo-attribute _raw:{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href '&lt;em&gt;qiq Project&lt;\/em&gt;', \/\/ (string) text [ \/\/ (array) optional attributes 'id' =&gt; 'qiq-link' '_raw' =&gt; true ] ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;&lt;em&gt;Qiq for PHP&lt;\/em&gt;&lt;\/a&gt; (The href and attributes will still be escaped properly.)"},{"id":"\/1.x\/helpers\/general.html#3-10-2-2","title":"3.10.2.2. base","content":"Helper for &lt;base&gt; tags.{{= base ( '\/base' \/\/ (string) href ) }} &lt;base href=\"\/base\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-3","title":"3.10.2.3. dl","content":"Helper for &lt;dl&gt; tags with &lt;dt&gt;\/&lt;dd&gt; items.{{= dl ( [ \/\/ (array) dt keys and dd values 'foo' =&gt; 'Foo Def', 'bar' =&gt; [ 'Bar Def A', 'Bar Def B', 'Bar Def C', ], 'baz' =&gt; 'Baz Def', ], [ \/\/ (array) optional attributes 'id' =&gt; 'test' ], ) }} &lt;dl id=\"test\"&gt; &lt;dt&gt;foo&lt;\/dt&gt; &lt;dd&gt;Foo Def&lt;\/dd&gt; &lt;dt&gt;bar&lt;\/dt&gt; &lt;dd&gt;Bar Def A&lt;\/dd&gt; &lt;dd&gt;Bar Def B&lt;\/dd&gt; &lt;dd&gt;Bar Def C&lt;\/dd&gt; &lt;dt&gt;baz&lt;\/dt&gt; &lt;dd&gt;Baz Def&lt;\/dd&gt; &lt;\/dl&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-4","title":"3.10.2.4. image","content":"Helper for &lt;img&gt; tags.{{= image ( '\/images\/hello.jpg', \/\/ (string) image href src [ \/\/ (array) optional attributes 'id' =&gt; 'image-id' ] ) }} &lt;!-- if alt is not specified, uses the basename of the image href --&gt; &lt;img src=\"\/images\/hello.jpg\" alt=\"hello\" id=\"image-id\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-5","title":"3.10.2.5. items","content":"Helper for a series of &lt;li&gt; tags.{{= items ([ \/\/ (array) list items 'foo', 'bar', 'baz' ]) }} &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-6","title":"3.10.2.6. link","content":"Helper for a &lt;link&gt; tag.{{= link ([ \/\/ (array) attributes 'rel' =&gt; 'prev', 'href' =&gt; '\/path\/to\/prev', ]) }} &lt;link rel=\"prev\" href=\"\/path\/to\/prev\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-7","title":"3.10.2.7. linkStylesheet","content":"Helper for a &lt;link&gt; stylesheet tag.{{= linkStylesheet ( '\/css\/print.css', \/\/ (string) the stylesheet href [ \/\/ (array) optional attributes 'media' =&gt; 'print', ] ) }} &lt;link rel=\"stylesheet\" href=\"\/css\/print.css\" type=\"text\/css\" media=\"print\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-8","title":"3.10.2.8. meta","content":"Helper for a &lt;meta&gt; tag.{{= meta ([ \/\/ (array) attributes 'charset' =&gt; 'utf-8' ]) }} &lt;meta charset=\"utf-8\"&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-9","title":"3.10.2.9. metaHttp","content":"Helper for a &lt;meta http-equiv&gt; tag.{{= metaHttp ( 'Location', \/\/ (string) http-equiv attribute '\/redirect\/to\/here' \/\/ (string) content attribute ) }} &lt;meta http-equiv=\"Location\" content=\"\/redirect\/to\/here\"&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-10","title":"3.10.2.10. metaName","content":"Helper for a &lt;meta name&gt; tag.{{= metaHttp ( 'author', \/\/ (string) name attribute 'Qiq for PHP' \/\/ (string) content attribute ) }} &lt;meta name=\"author\" content=\"Qiq for PHP\"&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-11","title":"3.10.2.11. ol","content":"Helper for &lt;ol&gt; tags with &lt;li&gt; items.{{= ol ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], [ \/\/ (array) optional attributes 'id' =&gt; 'foo-list' ] ) }} &lt;ol id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ol&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-12","title":"3.10.2.12. script","content":"Helper for a &lt;script&gt; tag.{{= script ( '\/js\/functions.js', \/\/ (string) src attribute [ \/\/ (array) other attributes 'async' =&gt; true ] ) }} &lt;script src=\"\/js\/functions.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt; "},{"id":"\/1.x\/helpers\/general.html#3-10-2-13","title":"3.10.2.13. ul","content":"Helper for &lt;ul&gt; tags with &lt;li&gt; items.{{= ul ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], [ \/\/ (array) optional attributes 'id' =&gt; 'foo-list' ] ) }} &lt;ul id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3","title":"3.10.3. Form Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code."},{"id":"\/1.x\/helpers\/forms.html#3-10-3-1","title":"3.10.3.1. Form Tag","content":"Open a form like so:{{= form ([ \/\/ (array) attributes 'method' =&gt; 'post', 'action' =&gt; '\/hello', ]) }} &lt;form method=\"post\" action=\"\/hello\" enctype=\"multipart\/form-data\"&gt; You can close a form just using &lt;\/form&gt;."},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-1","title":"3.10.3.2.1. checkboxField","content":"You can use a checkboxField as a generic input field helper, but you will have to set the checked attribute yourself to mark it as checked or not.Alternatively, if you specify the pseudo-attribute _options, greater functionality becomes available: The _options specify one or more checkboxes as part of the field, with their value when checked, and their corresponding label. If the _options have more than one element, then field name will be appended automatically with [] to make it an array. The value attribute will be matched against the _options and the correct checkboxes will be checked for you. The _default pseudo-attribute, when present, will produce a hidden input field for the value when no checkboxes are checked. {{= checkboxField ([ \/\/ (array) attributes 'name' =&gt; 'flags', 'value' =&gt; 'bar', '_default' =&gt; '', '_options' =&gt; [ 'foo' =&gt; 'Foo Flag', 'bar' =&gt; 'Bar Flag', 'baz' =&gt; 'Baz Flag', ] ]) }} &lt;input type=\"hidden\" name=\"flags\" value=\"\" \/&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"foo\" \/&gt; Foo Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"bar\" checked \/&gt; Bar Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"baz\" \/&gt; Baz Flag&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-2","title":"3.10.3.2.2. colorField","content":"{{= colorField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"color\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-3","title":"3.10.3.2.3. dateField","content":"{{= dateField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"date\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-4","title":"3.10.3.2.4. datetimeField","content":"{{= datetimeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"datetime\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-5","title":"3.10.3.2.5. datetimeLocalField","content":"{{= datetimeLocalField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"datetime-local\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-6","title":"3.10.3.2.6. emailField","content":"{{= emailField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"email\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-7","title":"3.10.3.2.7. fileField","content":"{{= fileField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"file\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-8","title":"3.10.3.2.8. hiddenField","content":"{{= hiddenField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"hidden\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-9","title":"3.10.3.2.9. inputField","content":"A generic input field; specify the type needed.{{= inputField ([ \/\/ (array) attributes 'type' =&gt; 'text', 'name' =&gt; 'foo', 'value' =&gt; 'bar', \/\/ ... ]) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-10","title":"3.10.3.2.10. monthField","content":"{{= monthField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"month\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-11","title":"3.10.3.2.11. numberField","content":"{{= numberField ([ \/\/ (array) attributes 'type' =&gt; 'number', 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"number\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-12","title":"3.10.3.2.12. passwordField","content":"{{= passwordField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"password\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-13","title":"3.10.3.2.13. radioField","content":"You can use a radioField as a generic input field helper, but you will have to set the checked attribute yourself to mark it as checked or not.Alternatively, if you specify the pseudo-attribute _options, greater functionality becomes available: The _options specify one or more radio buttons as part of the field, with their value when checked, and their corresponding label. The value attribute will be matched against the _options and the correct checkboxes will be checked for you. {{= radioField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'baz', '_options' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label, 'dib' =&gt; 'Dib Label', ), ]) }} &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"bar\" \/&gt; Bar Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; Baz Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"dib\" \/&gt; Dib Label&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-14","title":"3.10.3.2.14. rangeField","content":"{{= rangeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"range\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-15","title":"3.10.3.2.15. searchField","content":"{{= searchField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"search\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-16","title":"3.10.3.2.16. select","content":"Use the pseudo-attribute _options to describe the &lt;option&gt; tags.The attribute placeholder is honored as a placeholder label when no option is selected. The pseudo-attribute _default specifies the value of the placeholder.Using the attribute 'multiple' =&gt; true will set up a multiple select, and automatically add [] to the name if it is not already there.{{= select ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'dib', 'placeholder' =&gt; 'Please pick one', '_default' =&gt; '', '_options' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ]) }} &lt;select name=\"foo\"&gt; &lt;option value=\"\" disabled&gt;Please pick one&lt;\/option&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/select&gt; The helper also supports option groups. If an _options array value is itself an array, the key for that element will be used as an &lt;optgroup&gt; label and the array of values will be options under that group.{{= select ([ 'name' =&gt; 'foo', 'value' =&gt; 'bar', '_options' =&gt; [ 'Group A' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', ], 'Group B' =&gt; [ 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ], ]) }} &lt;select name=\"foo\"&gt; &lt;optgroup label=\"Group A\"&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;optgroup label=\"Group B\"&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;\/select&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-17","title":"3.10.3.2.17. telField","content":"{{= telField([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"tel\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-18","title":"3.10.3.2.18. textField","content":"{{= textField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-19","title":"3.10.3.2.19. textarea","content":"{{= textarea ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;textarea name=\"foo\"&gt;bar&lt;\/textarea&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-20","title":"3.10.3.2.20. timeField","content":"{{= timeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"time\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-21","title":"3.10.3.2.21. urlField","content":"{{= urlField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"url\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-2-22","title":"3.10.3.2.22. weekField","content":"{{= weekField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"week\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-3","title":"3.10.3.3. Button Tags","content":"Helpers for various button tags."},{"id":"\/1.x\/helpers\/forms.html#3-10-3-3-1","title":"3.10.3.3.1. button","content":"{{= button ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"button\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-3-2","title":"3.10.3.3.2. imageButton","content":"{{= imageButton ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'src' =&gt; '\/images\/map.png', ]) }} &lt;input type=\"image\" name=\"foo\" src=\"\/images\/map.png\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-3-3","title":"3.10.3.3.3. submitButton","content":"{{= submitButton ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"submit\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-3-4","title":"3.10.3.3.4. resetButton","content":"{{= resetButton ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"reset\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#3-10-3-4","title":"3.10.3.4. Label Tag","content":"A helper for &lt;label&gt; tags.{{= label ( 'Label For Field', \/\/ (string) label text [ \/\/ (array) optional attributes 'for' =&gt; 'field' ] ) }} &lt;label for=\"field\"&gt;Label For Field&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/custom.html#3-10-4","title":"3.10.4. Custom Helpers","content":"Developing a custom helper is straightforward: write a class for it, register it with the HelperLocator, then use it in a template."},{"id":"\/1.x\/helpers\/custom.html#3-10-4-1","title":"3.10.4.1. The Helper Class","content":"To write a helper, extend the Helper class, and implement the __invoke () method with whatever parameters you like. Have it return a string that has been appropriately escaped.Here is a helper to ROT-13 a string:namespace My\\Helper; use Qiq\\Helper; class Rot13 extends Helper { public function __invoke(string $str) : string { return $this-&gt;escape-&gt;h(str_rot13($str)); } } "},{"id":"\/1.x\/helpers\/custom.html#3-10-4-2","title":"3.10.4.2. The Helper Locator","content":"Now that you have the helper class, you will need to register a callable factory for it in the HelperLocator. (Registering a callable factory allows the HelperLocator to lazy-load the helper only when it is called.) The registration key will be the Qiq helper name, or the PHP $this helper method, you use for that helper in a template.$tpl = Template::new(...); $helperLocator = $tpl-&gt;getHelperLocator(); $helperLocator-&gt;set( 'rotOneThree', function () use ($helperLocator) { return new \\My\\Helper\\Rot13($helperLocator-&gt;escape()); } ); Note that you need to construct Helper classes with the Escape instance already in the HelperLocator."},{"id":"\/1.x\/helpers\/custom.html#3-10-4-3","title":"3.10.4.3. Use The Helper","content":"Now you can use the helper in template, either as Qiq code ...&lt;p&gt;{{= rotOneThree ('Uryyb Jbeyq!') }}&lt;\/p&gt; ... or as PHP:&lt;p&gt;&lt;?= $this-&gt;rotOneThree('Uryyb Jbeyq!') ?&gt;&lt;\/p&gt; Either way, the output will be the same:&lt;p&gt;Hello World!&lt;\/p&gt; "},{"id":"\/1.x\/compiler.html#3-11","title":"3.11. Compiler","content":"Although Qiq templates use native PHP, the {{ ... }} syntax sugar does require a compiling process. That process is very simple, even naive, but it does exist: If a compiled template already exists in the cache directory, and is newer than the source template file, the QiqCompiler returns the already-existing compiled template. Otherwise ... The QiqCompiler reads the source template file, splits out the {{ ... }} tags using a regular expression, and retains them as QiqToken objects . The QiqCompiler then invokes each QiqToken to get back the PHP code replacement for the {{ ... }} tag, and reassembles all the parts in order. The compiled template is saved to the compiler cache directory. The same source template will not be compiled again -- at least, not until it gets re-saved, thereby updating its timestamp, making it newer than the compiled version. "},{"id":"\/1.x\/compiler.html#3-11-1","title":"3.11.1. Cache Path","content":"The QiqCompiler cache path by default is your sys_get_temp_dir() directory appended with \/qiq, but you can specify any path with Template::new():$tpl = Template::new( cachePath: '\/path\/to\/qiqcache\/' ); The QiqCompiler saves the compiled templates in the cache using the full path of the source template file. For example, the cache path is \/private\/tmp and the source template file is at \/www\/site\/resources\/templates\/foo.php. That means the compiled template file will be cached at:\/private\/tmp\/www\/site\/resources\/templates\/foo.php If you see compiling errors, having the full source template path as part of the cache path will help you find the original template."},{"id":"\/1.x\/compiler.html#3-11-2","title":"3.11.2. Cache Clearing","content":"To clear the cache, reach into the Template to get the TemplateLocator, and call its clear() method.$tpl-&gt;getTemplateLocator()-&gt;clear(); "}]